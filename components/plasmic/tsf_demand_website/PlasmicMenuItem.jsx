/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 8yhBRaKsBf3R2wKMhT5dUU
// Component: X51Fss2dPhJ6
import * as React from "react";
import { useRouter } from "next/router";
import {
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts
} from "@plasmicapp/react-web";
import { useDataEnv } from "@plasmicapp/react-web/lib/host";
import { BaseListBoxItem } from "@plasmicpkgs/react-aria/skinny/registerListBoxItem";
import { BaseText } from "@plasmicpkgs/react-aria/skinny/registerText";
import { BaseText as BaseText2 } from "@plasmicpkgs/react-aria/skinny/registerText";
import { _useStyleTokens } from "./PlasmicStyleTokensProvider"; // plasmic-import: 8yhBRaKsBf3R2wKMhT5dUU/styleTokensProvider
import "@plasmicapp/react-web/lib/plasmic.css";
import projectcss from "./plasmic.module.css"; // plasmic-import: 8yhBRaKsBf3R2wKMhT5dUU/projectcss
import sty from "./PlasmicMenuItem.module.css"; // plasmic-import: X51Fss2dPhJ6/css

createPlasmicElementProxy;

export const PlasmicMenuItem__VariantProps = new Array();

export const PlasmicMenuItem__ArgProps = new Array(
  "value",
  "label",
  "description"
);

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicMenuItem__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const args = React.useMemo(
    () =>
      Object.assign(
        {
          value: ``,
          label: "Item 1"
        },
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );
  const $props = {
    ...args,
    ...variants
  };
  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  const styleTokensClassNames = _useStyleTokens();
  const [$ccVariants, setDollarCcVariants] = React.useState({
    hovered: false,
    pressed: false,
    focused: false,
    focusVisible: false,
    selected: false,
    disabled: false
  });
  const updateVariant = React.useCallback(changes => {
    setDollarCcVariants(prev => {
      if (!Object.keys(changes).some(k => prev[k] !== changes[k])) {
        return prev;
      }
      return { ...prev, ...changes };
    });
  }, []);
  return (
    <BaseListBoxItem
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        "__wab_instance",
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        styleTokensClassNames,
        sty.root
      )}
      id={args.value}
      plasmicUpdateVariant={updateVariant}
      textValue={args.label}
    >
      <div className={classNames(projectcss.all, sty.freeBox__l3M09)}>
        <BaseText
          data-plasmic-name={"ariaText"}
          data-plasmic-override={overrides.ariaText}
          className={classNames("__wab_instance", sty.ariaText)}
          slot={"label"}
        >
          <div className={classNames(projectcss.all, sty.freeBox___8XfjZ)}>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__yh8R
              )}
            >
              <React.Fragment>
                {(() => {
                  try {
                    return $props.label;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return "Item 1";
                    }
                    throw e;
                  }
                })()}
              </React.Fragment>
            </div>
          </div>
        </BaseText>
        {(() => {
          try {
            return $props.description;
          } catch (e) {
            if (
              e instanceof TypeError ||
              e?.plasmicType === "PlasmicUndefinedDataError"
            ) {
              return false;
            }
            throw e;
          }
        })() ? (
          <BaseText2
            data-plasmic-name={"ariaDescription"}
            data-plasmic-override={overrides.ariaDescription}
            className={classNames("__wab_instance", sty.ariaDescription)}
            slot={"description"}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__dfLxD
              )}
            >
              <React.Fragment>{$props.description}</React.Fragment>
            </div>
          </BaseText2>
        ) : null}
      </div>
    </BaseListBoxItem>
  );
}

const PlasmicDescendants = {
  root: ["root", "ariaText", "ariaDescription"],
  ariaText: ["ariaText"],
  ariaDescription: ["ariaDescription"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicMenuItem__ArgProps,
          internalVariantPropNames: PlasmicMenuItem__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicMenuItem__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicMenuItem";
  } else {
    func.displayName = `PlasmicMenuItem.${nodeName}`;
  }
  return func;
}

export const PlasmicMenuItem = Object.assign(
  // Top-level PlasmicMenuItem renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    ariaText: makeNodeComponent("ariaText"),
    ariaDescription: makeNodeComponent("ariaDescription"),
    // Metadata about props expected for PlasmicMenuItem
    internalVariantProps: PlasmicMenuItem__VariantProps,
    internalArgProps: PlasmicMenuItem__ArgProps
  }
);

export default PlasmicMenuItem;
/* prettier-ignore-end */
