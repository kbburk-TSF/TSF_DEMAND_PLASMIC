/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 8yhBRaKsBf3R2wKMhT5dUU
// Component: RS9jruOWtFtt
import * as React from "react";
import Link from "next/link";
import { useRouter } from "next/router";
import {
  PlasmicLink as PlasmicLink__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  hasVariant,
  useDollarState
} from "@plasmicapp/react-web";
import { useDataEnv } from "@plasmicapp/react-web/lib/host";
import { BaseButton } from "@plasmicpkgs/react-aria/skinny/registerButton";
import { _useGlobalVariants } from "./plasmic"; // plasmic-import: 8yhBRaKsBf3R2wKMhT5dUU/projectModule
import { _useStyleTokens } from "./PlasmicStyleTokensProvider"; // plasmic-import: 8yhBRaKsBf3R2wKMhT5dUU/styleTokensProvider
import "@plasmicapp/react-web/lib/plasmic.css";
import projectcss from "./plasmic.module.css"; // plasmic-import: 8yhBRaKsBf3R2wKMhT5dUU/projectcss
import sty from "./PlasmicTsfDemandMainNavigation.module.css"; // plasmic-import: RS9jruOWtFtt/css
import TsfLogoHorizontalSvgIcon from "./icons/PlasmicIcon__TsfLogoHorizontalSvg"; // plasmic-import: zYZGutO5-6PP/icon
import IconIcon from "./icons/PlasmicIcon__Icon"; // plasmic-import: _1keoIzHHD8p/icon
import CircleIcon from "./icons/PlasmicIcon__Circle"; // plasmic-import: iCnGomX0kBnc/icon
import ChevronDownIcon from "./icons/PlasmicIcon__ChevronDown"; // plasmic-import: psfpTc-XGOO7/icon

createPlasmicElementProxy;

export const PlasmicTsfDemandMainNavigation__VariantProps = new Array();

export const PlasmicTsfDemandMainNavigation__ArgProps = new Array();

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicTsfDemandMainNavigation__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );
  const $props = {
    ...args,
    ...variants
  };
  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  const globalVariants = _useGlobalVariants();
  const stateSpecs = React.useMemo(
    () => [
      {
        path: "variable",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      }
    ],

    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });
  const styleTokensClassNames = _useStyleTokens();
  return (
    <div
      data-plasmic-name={"tsfMainNavBar"}
      data-plasmic-override={overrides.tsfMainNavBar}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        styleTokensClassNames,
        sty.tsfMainNavBar
      )}
    >
      <div className={classNames(projectcss.all, sty.freeBox__vqTuD)}>
        <PlasmicLink__
          className={classNames(projectcss.all, projectcss.a, sty.link__ncIu2)}
          component={Link}
          href={`/`}
          platform={"nextjs"}
        >
          <TsfLogoHorizontalSvgIcon
            className={classNames(projectcss.all, sty.svg___9Qr5X)}
            role={"img"}
          />
        </PlasmicLink__>
        <div className={classNames(projectcss.all, sty.freeBox___2E5Xi)}>
          <PlasmicLink__
            className={classNames(
              projectcss.all,
              projectcss.a,
              sty.link__fh54W
            )}
            component={Link}
            href={`/tsf-lite`}
            platform={"nextjs"}
          >
            {false ? (
              <IconIcon
                className={classNames(projectcss.all, sty.svg__lmeCo)}
                role={"img"}
              />
            ) : null}
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__gSnb,
                {
                  [sty.textglobal_unnamedGlobalGroupOfVariants_unnamedVariant__gSnbFzl1R]:
                    hasVariant(
                      globalVariants,
                      "unnamedGlobalGroupOfVariants",
                      "unnamedVariant"
                    )
                }
              )}
            >
              {"TSF Lite App"}
            </div>
            {false ? (
              <IconIcon
                className={classNames(projectcss.all, sty.svg__ypEw)}
                role={"img"}
              />
            ) : null}
          </PlasmicLink__>
          <PlasmicLink__
            className={classNames(projectcss.all, projectcss.a, sty.link__x5J3)}
            component={Link}
            href={`/tsf-action`}
            platform={"nextjs"}
          >
            {false ? (
              <IconIcon
                className={classNames(projectcss.all, sty.svg__oqLd4)}
                role={"img"}
              />
            ) : null}
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__urO1G
              )}
            >
              {"TSF in Action"}
            </div>
            {false ? (
              <IconIcon
                className={classNames(projectcss.all, sty.svg___3Smnu)}
                role={"img"}
              />
            ) : null}
          </PlasmicLink__>
          <PlasmicLink__
            className={classNames(
              projectcss.all,
              projectcss.a,
              sty.link__tJiJg
            )}
            component={Link}
            href={`/demo`}
            platform={"nextjs"}
          >
            {false ? (
              <IconIcon
                className={classNames(projectcss.all, sty.svg__qqCtv)}
                role={"img"}
              />
            ) : null}
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__u8ZOt,
                {
                  [sty.textglobal_unnamedGlobalGroupOfVariants_unnamedVariant__u8ZOtFzl1R]:
                    hasVariant(
                      globalVariants,
                      "unnamedGlobalGroupOfVariants",
                      "unnamedVariant"
                    )
                }
              )}
            >
              {"TSF Engine Demo"}
            </div>
            {false ? (
              <IconIcon
                className={classNames(projectcss.all, sty.svg__bS0Cy)}
                role={"img"}
              />
            ) : null}
          </PlasmicLink__>
          <PlasmicLink__
            className={classNames(projectcss.all, projectcss.a, sty.link__wfIh)}
            component={Link}
            href={`/case-studies`}
            platform={"nextjs"}
          >
            {false ? (
              <IconIcon
                className={classNames(projectcss.all, sty.svg___59Suf)}
                role={"img"}
              />
            ) : null}
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__maKtH,
                {
                  [sty.textglobal_unnamedGlobalGroupOfVariants_unnamedVariant__maKtHfzl1R]:
                    hasVariant(
                      globalVariants,
                      "unnamedGlobalGroupOfVariants",
                      "unnamedVariant"
                    )
                }
              )}
            >
              {"Case Studies"}
            </div>
            {false ? (
              <IconIcon
                className={classNames(projectcss.all, sty.svg__ymyaE)}
                role={"img"}
              />
            ) : null}
          </PlasmicLink__>
          <PlasmicLink__
            className={classNames(
              projectcss.all,
              projectcss.a,
              sty.link__jlX6X
            )}
            component={Link}
            href={`/science`}
            platform={"nextjs"}
          >
            {false ? (
              <IconIcon
                className={classNames(projectcss.all, sty.svg__d3CNe)}
                role={"img"}
              />
            ) : null}
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__bPkQm,
                {
                  [sty.textglobal_unnamedGlobalGroupOfVariants_unnamedVariant__bPkQmfzl1R]:
                    hasVariant(
                      globalVariants,
                      "unnamedGlobalGroupOfVariants",
                      "unnamedVariant"
                    )
                }
              )}
            >
              {"The Science"}
            </div>
            {false ? (
              <IconIcon
                className={classNames(projectcss.all, sty.svg__se5M3)}
                role={"img"}
              />
            ) : null}
          </PlasmicLink__>
          <PlasmicLink__
            className={classNames(projectcss.all, projectcss.a, sty.link__stCj)}
            component={Link}
            href={`/articles`}
            platform={"nextjs"}
          >
            {false ? (
              <IconIcon
                className={classNames(projectcss.all, sty.svg___6LrZb)}
                role={"img"}
              />
            ) : null}
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text___6KZiL,
                {
                  [sty.textglobal_unnamedGlobalGroupOfVariants_unnamedVariant___6KZiLfzl1R]:
                    hasVariant(
                      globalVariants,
                      "unnamedGlobalGroupOfVariants",
                      "unnamedVariant"
                    )
                }
              )}
            >
              {"Articles"}
            </div>
            {false ? (
              <IconIcon
                className={classNames(projectcss.all, sty.svg___7JiNx)}
                role={"img"}
              />
            ) : null}
          </PlasmicLink__>
          <BaseButton
            data-plasmic-name={"ariaButton"}
            data-plasmic-override={overrides.ariaButton}
            className={classNames("__wab_instance", sty.ariaButton)}
            onPress={async event => {
              const $steps = {};
              $steps["goToInterest"] = true
                ? (() => {
                    const actionArgs = { destination: `/interest` };
                    return (({ destination }) => {
                      if (
                        typeof destination === "string" &&
                        destination.startsWith("#")
                      ) {
                        document
                          .getElementById(destination.substr(1))
                          .scrollIntoView({ behavior: "smooth" });
                      } else {
                        __nextRouter?.push(destination);
                      }
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["goToInterest"] != null &&
                typeof $steps["goToInterest"] === "object" &&
                typeof $steps["goToInterest"].then === "function"
              ) {
                $steps["goToInterest"] = await $steps["goToInterest"];
              }
            }}
            target={$props.openLinkInNewTab ? "_blank" : "_self"}
          >
            {false ? (
              <div
                data-plasmic-name={"softBackground2"}
                data-plasmic-override={overrides.softBackground2}
                className={classNames(projectcss.all, sty.softBackground2)}
              />
            ) : null}
            {false ? (
              <div
                data-plasmic-name={"border2"}
                data-plasmic-override={overrides.border2}
                className={classNames(projectcss.all, sty.border2)}
              />
            ) : null}
            <div
              data-plasmic-name={"interactionEffect2"}
              data-plasmic-override={overrides.interactionEffect2}
              className={classNames(projectcss.all, sty.interactionEffect2)}
            />

            <div className={classNames(projectcss.all, sty.freeBox__g5Hzm)}>
              <div className={classNames(projectcss.all, sty.freeBox__qRrN)}>
                <CircleIcon
                  className={classNames(projectcss.all, sty.svg__lppJn)}
                  role={"img"}
                />
              </div>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__zk1Xh
                )}
              >
                {"Join Beta"}
              </div>
              <div className={classNames(projectcss.all, sty.freeBox__hHfXe)}>
                <ChevronDownIcon
                  className={classNames(projectcss.all, sty.svg__pwyzq)}
                  role={"img"}
                />
              </div>
            </div>
          </BaseButton>
        </div>
      </div>
    </div>
  );
}

const PlasmicDescendants = {
  tsfMainNavBar: [
    "tsfMainNavBar",
    "ariaButton",
    "softBackground2",
    "border2",
    "interactionEffect2"
  ],

  ariaButton: [
    "ariaButton",
    "softBackground2",
    "border2",
    "interactionEffect2"
  ],

  softBackground2: ["softBackground2"],
  border2: ["border2"],
  interactionEffect2: ["interactionEffect2"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicTsfDemandMainNavigation__ArgProps,
          internalVariantPropNames: PlasmicTsfDemandMainNavigation__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicTsfDemandMainNavigation__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "tsfMainNavBar") {
    func.displayName = "PlasmicTsfDemandMainNavigation";
  } else {
    func.displayName = `PlasmicTsfDemandMainNavigation.${nodeName}`;
  }
  return func;
}

export const PlasmicTsfDemandMainNavigation = Object.assign(
  // Top-level PlasmicTsfDemandMainNavigation renders the root element
  makeNodeComponent("tsfMainNavBar"),
  {
    // Helper components rendering sub-elements
    ariaButton: makeNodeComponent("ariaButton"),
    softBackground2: makeNodeComponent("softBackground2"),
    border2: makeNodeComponent("border2"),
    interactionEffect2: makeNodeComponent("interactionEffect2"),
    // Metadata about props expected for PlasmicTsfDemandMainNavigation
    internalVariantProps: PlasmicTsfDemandMainNavigation__VariantProps,
    internalArgProps: PlasmicTsfDemandMainNavigation__ArgProps
  }
);

export default PlasmicTsfDemandMainNavigation;
/* prettier-ignore-end */
