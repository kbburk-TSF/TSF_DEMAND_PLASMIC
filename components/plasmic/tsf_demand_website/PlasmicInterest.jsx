/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 8yhBRaKsBf3R2wKMhT5dUU
// Component: hHY6u-Jdbz5_
import * as React from "react";
import Head from "next/head";
import { useRouter } from "next/router";
import {
  PlasmicImg as PlasmicImg__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  generateStateOnChangeProp,
  hasVariant,
  useDollarState
} from "@plasmicapp/react-web";
import { useDataEnv } from "@plasmicapp/react-web/lib/host";
import TsfDemandMainNavigation from "../../TsfDemandMainNavigation"; // plasmic-import: RS9jruOWtFtt/component
import TextField from "../../TextField"; // plasmic-import: 21UNPRpdDW_C/component
import Select from "../../Select"; // plasmic-import: bO30u1Xaq46V/component
import MenuItem from "../../MenuItem"; // plasmic-import: X51Fss2dPhJ6/component
import Checkbox from "../../Checkbox"; // plasmic-import: 5tftsYAJSYY2/component
import Button from "../../Button"; // plasmic-import: -U7nCsYlsFbS/component
import TsfFooter from "../../TsfFooter"; // plasmic-import: NmgYw5lHKANx/component
import { _useGlobalVariants } from "./plasmic"; // plasmic-import: 8yhBRaKsBf3R2wKMhT5dUU/projectModule
import { _useStyleTokens } from "./PlasmicStyleTokensProvider"; // plasmic-import: 8yhBRaKsBf3R2wKMhT5dUU/styleTokensProvider
import "@plasmicapp/react-web/lib/plasmic.css";
import projectcss from "./plasmic.module.css"; // plasmic-import: 8yhBRaKsBf3R2wKMhT5dUU/projectcss
import sty from "./PlasmicInterest.module.css"; // plasmic-import: hHY6u-Jdbz5_/css

createPlasmicElementProxy;

export const PlasmicInterest__VariantProps = new Array();

export const PlasmicInterest__ArgProps = new Array();

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicInterest__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );
  const $props = {
    ...args,
    ...variants
  };
  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  const globalVariants = _useGlobalVariants();
  const stateSpecs = React.useMemo(
    () => [
      {
        path: "agree.isSelected",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "name.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "email.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "subject.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "message.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      }
    ],

    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });
  const styleTokensClassNames = _useStyleTokens();
  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            styleTokensClassNames,
            sty.root
          )}
        >
          <TsfDemandMainNavigation
            data-plasmic-name={"tsfDemandMainNavigation"}
            data-plasmic-override={overrides.tsfDemandMainNavigation}
            className={classNames(
              "__wab_instance",
              sty.tsfDemandMainNavigation
            )}
          />

          <div
            data-plasmic-name={"pageBanner"}
            data-plasmic-override={overrides.pageBanner}
            className={classNames(projectcss.all, sty.pageBanner)}
          >
            <div className={classNames(projectcss.all, sty.freeBox__dAbI)}>
              <div className={classNames(projectcss.all, sty.columns___6NES)}>
                <div className={classNames(projectcss.all, sty.column__pv9G9)}>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__ogUfF)}
                  >
                    <h1
                      data-plasmic-name={"h1"}
                      data-plasmic-override={overrides.h1}
                      className={classNames(
                        projectcss.all,
                        projectcss.h1,
                        projectcss.__wab_text,
                        sty.h1
                      )}
                    >
                      {"Contact Us"}
                    </h1>
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text___1TvDz
                      )}
                    >
                      {
                        "Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam,"
                      }
                    </div>
                  </div>
                </div>
                <div className={classNames(projectcss.all, sty.column__usHde)}>
                  <PlasmicImg__
                    alt={""}
                    className={classNames(sty.img__m1AYi)}
                    displayHeight={"auto"}
                    displayMaxHeight={"none"}
                    displayMaxWidth={
                      hasVariant(globalVariants, "screen", "mobileOnly")
                        ? "100%"
                        : "100%"
                    }
                    displayMinHeight={"0"}
                    displayMinWidth={"0"}
                    displayWidth={"auto"}
                    loading={
                      hasVariant(globalVariants, "screen", "mobileOnly")
                        ? "lazy"
                        : "lazy"
                    }
                    src={
                      hasVariant(globalVariants, "screen", "mobileOnly")
                        ? {
                            src: "/plasmic/tsf_demand_website/images/stephenPhillipsHostreviewsCoUk3Mhgvrk4TjMUnsplashJpg.jpg",
                            fullWidth: 1920,
                            fullHeight: 1280,
                            aspectRatio: undefined
                          }
                        : {
                            src: "/plasmic/tsf_demand_website/images/stephenPhillipsHostreviewsCoUk3Mhgvrk4TjMUnsplashJpg.jpg",
                            fullWidth: 1920,
                            fullHeight: 1280,
                            aspectRatio: undefined
                          }
                    }
                  />
                </div>
              </div>
            </div>
          </div>
          <div
            data-plasmic-name={"mainSection"}
            data-plasmic-override={overrides.mainSection}
            className={classNames(projectcss.all, sty.mainSection)}
          >
            <div className={classNames(projectcss.all, sty.columns__nV9Vr)}>
              <div className={classNames(projectcss.all, sty.column___0Ioae)}>
                <form
                  data-plasmic-name={"form"}
                  data-plasmic-override={overrides.form}
                  action={"https://example.com"}
                  className={classNames(projectcss.all, sty.form)}
                >
                  <h3
                    data-plasmic-name={"h3"}
                    data-plasmic-override={overrides.h3}
                    className={classNames(
                      projectcss.all,
                      projectcss.h3,
                      projectcss.__wab_text,
                      sty.h3
                    )}
                  >
                    {"Get in touch"}
                  </h3>
                  <TextField
                    data-plasmic-name={"name"}
                    data-plasmic-override={overrides.name}
                    className={classNames("__wab_instance", sty.name)}
                    label={"Name"}
                    onChange={async (...eventArgs) => {
                      generateStateOnChangeProp($state, [
                        "name",
                        "value"
                      ]).apply(null, eventArgs);
                      if (
                        eventArgs.length > 1 &&
                        eventArgs[1] &&
                        eventArgs[1]._plasmic_state_init_
                      ) {
                        return;
                      }
                    }}
                    placeholder={"Your name..."}
                  />

                  <TextField
                    data-plasmic-name={"email"}
                    data-plasmic-override={overrides.email}
                    className={classNames("__wab_instance", sty.email)}
                    label={"Email"}
                    onChange={async (...eventArgs) => {
                      generateStateOnChangeProp($state, [
                        "email",
                        "value"
                      ]).apply(null, eventArgs);
                      if (
                        eventArgs.length > 1 &&
                        eventArgs[1] &&
                        eventArgs[1]._plasmic_state_init_
                      ) {
                        return;
                      }
                    }}
                    placeholder={"example@domain.com"}
                  />

                  <Select
                    data-plasmic-name={"subject"}
                    data-plasmic-override={overrides.subject}
                    className={classNames("__wab_instance", sty.subject)}
                    items={
                      <React.Fragment>
                        <MenuItem label={"Sales"} value={"sales"} />
                        <MenuItem label={"Partnership"} value={"partnership"} />
                        <MenuItem label={"Something else"} value={"other"} />
                      </React.Fragment>
                    }
                    label={"Subject"}
                    onChange={async (...eventArgs) => {
                      generateStateOnChangeProp($state, [
                        "subject",
                        "value"
                      ]).apply(null, eventArgs);
                      if (
                        eventArgs.length > 1 &&
                        eventArgs[1] &&
                        eventArgs[1]._plasmic_state_init_
                      ) {
                        return;
                      }
                    }}
                    placeholder={"Subject..."}
                  />

                  <TextField
                    data-plasmic-name={"message"}
                    data-plasmic-override={overrides.message}
                    className={classNames("__wab_instance", sty.message)}
                    label={"Message"}
                    multiLine={true}
                    onChange={async (...eventArgs) => {
                      generateStateOnChangeProp($state, [
                        "message",
                        "value"
                      ]).apply(null, eventArgs);
                      if (
                        eventArgs.length > 1 &&
                        eventArgs[1] &&
                        eventArgs[1]._plasmic_state_init_
                      ) {
                        return;
                      }
                    }}
                  />

                  <Checkbox
                    data-plasmic-name={"agree"}
                    data-plasmic-override={overrides.agree}
                    className={classNames("__wab_instance", sty.agree)}
                    label={"Agree to send form data to us?"}
                    onChange={async (...eventArgs) => {
                      generateStateOnChangeProp($state, [
                        "agree",
                        "isSelected"
                      ]).apply(null, eventArgs);
                      if (
                        eventArgs.length > 1 &&
                        eventArgs[1] &&
                        eventArgs[1]._plasmic_state_init_
                      ) {
                        return;
                      }
                    }}
                  />

                  <Button
                    data-plasmic-name={"submit"}
                    data-plasmic-override={overrides.submit}
                    className={classNames("__wab_instance", sty.submit)}
                    label={
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__unZ0E
                        )}
                      >
                        {"Submit"}
                      </div>
                    }
                    submitsForm={true}
                  />
                </form>
              </div>
              <div className={classNames(projectcss.all, sty.column__rfIko)}>
                <PlasmicImg__
                  alt={""}
                  className={classNames(sty.img__idufD)}
                  displayHeight={"100%"}
                  displayMaxHeight={"none"}
                  displayMaxWidth={"100%"}
                  displayMinHeight={"0"}
                  displayMinWidth={"0"}
                  displayWidth={"100%"}
                  loading={"lazy"}
                  src={{
                    src: "/plasmic/tsf_demand_website/images/corinneKutzTMi2R5NfoUnsplashJpg.jpg",
                    fullWidth: 1920,
                    fullHeight: 1280,
                    aspectRatio: undefined
                  }}
                />
              </div>
            </div>
          </div>
          <TsfFooter
            data-plasmic-name={"tsfFooter"}
            data-plasmic-override={overrides.tsfFooter}
            className={classNames("__wab_instance", sty.tsfFooter)}
          />
        </div>
      </div>
    </React.Fragment>
  );
}

const PlasmicDescendants = {
  root: [
    "root",
    "tsfDemandMainNavigation",
    "pageBanner",
    "h1",
    "mainSection",
    "form",
    "h3",
    "name",
    "email",
    "subject",
    "message",
    "agree",
    "submit",
    "tsfFooter"
  ],

  tsfDemandMainNavigation: ["tsfDemandMainNavigation"],
  pageBanner: ["pageBanner", "h1"],
  h1: ["h1"],
  mainSection: [
    "mainSection",
    "form",
    "h3",
    "name",
    "email",
    "subject",
    "message",
    "agree",
    "submit"
  ],

  form: [
    "form",
    "h3",
    "name",
    "email",
    "subject",
    "message",
    "agree",
    "submit"
  ],

  h3: ["h3"],
  name: ["name"],
  email: ["email"],
  subject: ["subject"],
  message: ["message"],
  agree: ["agree"],
  submit: ["submit"],
  tsfFooter: ["tsfFooter"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicInterest__ArgProps,
          internalVariantPropNames: PlasmicInterest__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicInterest__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicInterest";
  } else {
    func.displayName = `PlasmicInterest.${nodeName}`;
  }
  return func;
}

export const PlasmicInterest = Object.assign(
  // Top-level PlasmicInterest renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    tsfDemandMainNavigation: makeNodeComponent("tsfDemandMainNavigation"),
    pageBanner: makeNodeComponent("pageBanner"),
    h1: makeNodeComponent("h1"),
    mainSection: makeNodeComponent("mainSection"),
    form: makeNodeComponent("form"),
    h3: makeNodeComponent("h3"),
    _name: makeNodeComponent("name"),
    email: makeNodeComponent("email"),
    subject: makeNodeComponent("subject"),
    message: makeNodeComponent("message"),
    agree: makeNodeComponent("agree"),
    submit: makeNodeComponent("submit"),
    tsfFooter: makeNodeComponent("tsfFooter"),
    // Metadata about props expected for PlasmicInterest
    internalVariantProps: PlasmicInterest__VariantProps,
    internalArgProps: PlasmicInterest__ArgProps,
    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicInterest;
/* prettier-ignore-end */
