/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 8yhBRaKsBf3R2wKMhT5dUU
// Component: 4H9kT7AEbJl1
import * as React from "react";
import Head from "next/head";
import { useRouter } from "next/router";
import {
  PlasmicImg as PlasmicImg__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  hasVariant
} from "@plasmicapp/react-web";
import { useDataEnv } from "@plasmicapp/react-web/lib/host";
import TsfDemandMainNavigation from "../../TsfDemandMainNavigation"; // plasmic-import: RS9jruOWtFtt/component
import Button from "../../Button"; // plasmic-import: -U7nCsYlsFbS/component
import { BaseButton } from "@plasmicpkgs/react-aria/skinny/registerButton";
import TsfFooter from "../../TsfFooter"; // plasmic-import: NmgYw5lHKANx/component
import { _useGlobalVariants } from "./plasmic"; // plasmic-import: 8yhBRaKsBf3R2wKMhT5dUU/projectModule
import { _useStyleTokens } from "./PlasmicStyleTokensProvider"; // plasmic-import: 8yhBRaKsBf3R2wKMhT5dUU/styleTokensProvider
import "@plasmicapp/react-web/lib/plasmic.css";
import projectcss from "./plasmic.module.css"; // plasmic-import: 8yhBRaKsBf3R2wKMhT5dUU/projectcss
import sty from "./PlasmicAboutTsf.module.css"; // plasmic-import: 4H9kT7AEbJl1/css
import CircleIcon from "./icons/PlasmicIcon__Circle"; // plasmic-import: iCnGomX0kBnc/icon
import ArrowRightSvgIcon from "./icons/PlasmicIcon__ArrowRightSvg"; // plasmic-import: WXIx2uHDhf9R/icon

createPlasmicElementProxy;

export const PlasmicAboutTsf__VariantProps = new Array();

export const PlasmicAboutTsf__ArgProps = new Array();

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicAboutTsf__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );
  const $props = {
    ...args,
    ...variants
  };
  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  const globalVariants = _useGlobalVariants();
  const styleTokensClassNames = _useStyleTokens();
  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            styleTokensClassNames,
            sty.root
          )}
        >
          <div className={classNames(projectcss.all, sty.freeBox__tCEv2)}>
            <div className={classNames(projectcss.all, sty.freeBox__wVcL)}>
              <TsfDemandMainNavigation
                data-plasmic-name={"tsfDemandMainNavigation"}
                data-plasmic-override={overrides.tsfDemandMainNavigation}
                className={classNames(
                  "__wab_instance",
                  sty.tsfDemandMainNavigation
                )}
              />
            </div>
            <div className={classNames(projectcss.all, sty.freeBox__t4FgT)}>
              <div className={classNames(projectcss.all, sty.freeBox___6Vxde)}>
                <div className={classNames(projectcss.all, sty.freeBox__avVZp)}>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__yVu6I)}
                  >
                    <div
                      className={classNames(projectcss.all, sty.freeBox__qrV4V)}
                    >
                      <h1
                        data-plasmic-name={"h1"}
                        data-plasmic-override={overrides.h1}
                        className={classNames(
                          projectcss.all,
                          projectcss.h1,
                          projectcss.__wab_text,
                          sty.h1
                        )}
                      >
                        {hasVariant(globalVariants, "screen", "mobileOnly")
                          ? "Ready to accept or acquiesce willing."
                          : "Who We Are"}
                      </h1>
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__oWmll
                        )}
                      >
                        {
                          "TSF (Targetetd Seasonal Forecasts Inc.) builds fully automated forecasting technology that gives small and mid-sized merchants the same level of precision used by enterprise analytics teams. We believe that clarity beats complexity \u2014 and that forecasting should be transparent, explainable, and practical. "
                        }
                      </div>
                    </div>
                  </div>
                  <div
                    className={classNames(projectcss.all, sty.freeBox___0F6E)}
                  >
                    <PlasmicImg__
                      alt={""}
                      className={classNames(sty.img__vTwdc)}
                      displayHeight={"auto"}
                      displayMaxHeight={"none"}
                      displayMaxWidth={"100%"}
                      displayMinHeight={"0"}
                      displayMinWidth={"0"}
                      displayWidth={"513px"}
                      loading={"lazy"}
                      src={{
                        src: "/plasmic/tsf_demand_website/images/tsfLogoStackedSvg.svg",
                        fullWidth: 612,
                        fullHeight: 515.2,
                        aspectRatio: 1.187888
                      }}
                    />
                  </div>
                </div>
              </div>
            </div>
          </div>
          <div
            data-plasmic-name={"mainSection"}
            data-plasmic-override={overrides.mainSection}
            className={classNames(projectcss.all, sty.mainSection)}
          >
            <div
              data-plasmic-name={"container4"}
              data-plasmic-override={overrides.container4}
              className={classNames(projectcss.all, sty.container4)}
            >
              <div className={classNames(projectcss.all, sty.freeBox__ljwCo)}>
                <h2
                  className={classNames(
                    projectcss.all,
                    projectcss.h2,
                    projectcss.__wab_text,
                    sty.h2__tyVkB
                  )}
                >
                  {hasVariant(globalVariants, "screen", "mobileOnly")
                    ? "Professional And\nDedicated Consulting Services..."
                    : "The Science Behind TSF"}
                </h2>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__nlJhw
                  )}
                >
                  {
                    "Traditional forecasting models operate on a single timeline \u2014 each day\u2019s value depends on the one before it. That means when reality shifts mid-month, their forecasts can\u2019t keep up; the curve is already locked into yesterday\u2019s assumptions."
                  }
                </div>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__adw5S
                  )}
                >
                  {
                    "The Model of Temporal Inertia (MTI) changes this. TSF forecasts operate on two timelines at once \u2014 a sequential timeline for short-term continuity and a seasonal timeline that maps recurring patterns across years. This structure lets each daily forecast value stand independently, so the model can recognize and capture changes within the forecast period instead of missing them."
                  }
                </div>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__vlCom
                  )}
                >
                  {
                    "That independence is what makes TSF capable of producing 30-, 60-, and 90-day forecasts with measured confidence and within-period adaptability \u2014 something traditional forecasting simply can\u2019t do."
                  }
                </div>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__knQx6
                  )}
                >
                  <React.Fragment>
                    <React.Fragment>
                      {"Each day\u2019s forecast value is selected from "}
                    </React.Fragment>
                    <span
                      className={"plasmic_default__all plasmic_default__span"}
                      style={{ fontWeight: 700 }}
                    >
                      {"800 independent forecast models"}
                    </span>
                    <React.Fragment>
                      {" \u2014 the result of combining "}
                    </React.Fragment>
                    <span
                      className={"plasmic_default__all plasmic_default__span"}
                      style={{ fontWeight: 700 }}
                    >
                      {"10 seasonal models "}
                    </span>
                    <React.Fragment>{"and "}</React.Fragment>
                    <span
                      className={"plasmic_default__all plasmic_default__span"}
                      style={{ fontWeight: 700 }}
                    >
                      {"2 seasonal series"}
                    </span>
                    <React.Fragment>{", each producing "}</React.Fragment>
                    <span
                      className={"plasmic_default__all plasmic_default__span"}
                      style={{ fontWeight: 700 }}
                    >
                      {"40 different forecasts per combination."}
                    </span>
                    <React.Fragment>
                      {
                        " The system evaluates each forecast\u2019s historical accuracy and selects the model with the strongest record of performance for that specific date. "
                      }
                    </React.Fragment>
                  </React.Fragment>
                </div>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__fv2T
                  )}
                >
                  <React.Fragment>
                    <React.Fragment>
                      {
                        "The full TSF Engine \u2014 the foundation of all products \u2014 includes more than "
                      }
                    </React.Fragment>
                    <span
                      className={"plasmic_default__all plasmic_default__span"}
                      style={{ fontWeight: 700 }}
                    >
                      {"25 seasonal models,"}
                    </span>
                    <React.Fragment>{" each with "}</React.Fragment>
                    <span
                      className={"plasmic_default__all plasmic_default__span"}
                      style={{ fontWeight: 700 }}
                    >
                      {"3 seasonal series"}
                    </span>
                    <React.Fragment>{", creating over "}</React.Fragment>
                    <span
                      className={"plasmic_default__all plasmic_default__span"}
                      style={{ fontWeight: 700 }}
                    >
                      {"3,000 forecast models for monthly forecasts"}
                    </span>
                    <React.Fragment>{" and another "}</React.Fragment>
                    <span
                      className={"plasmic_default__all plasmic_default__span"}
                      style={{ fontWeight: 700 }}
                    >
                      {"3,000 for quarterly forecasts"}
                    </span>
                    <React.Fragment>
                      {
                        ". Each model is evaluated objectively; none are trained or tuned subjectively. "
                      }
                    </React.Fragment>
                  </React.Fragment>
                </div>
                <Button
                  data-plasmic-name={"button"}
                  data-plasmic-override={overrides.button}
                  className={classNames("__wab_instance", sty.button)}
                  color={"tsfDark"}
                  label={
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text___4OUzO
                      )}
                    >
                      {
                        "Learn more about the science behind MTI and TSF\u2019s forecasting process"
                      }
                    </div>
                  }
                  linkTo={`/science`}
                />
              </div>
            </div>
            <div
              data-plasmic-name={"mainSection2"}
              data-plasmic-override={overrides.mainSection2}
              className={classNames(projectcss.all, sty.mainSection2)}
            >
              <div
                data-plasmic-name={"container5"}
                data-plasmic-override={overrides.container5}
                className={classNames(projectcss.all, sty.container5)}
              >
                <div className={classNames(projectcss.all, sty.freeBox__q7QK)}>
                  <h2
                    className={classNames(
                      projectcss.all,
                      projectcss.h2,
                      projectcss.__wab_text,
                      sty.h2___2W75O
                    )}
                  >
                    {hasVariant(globalVariants, "screen", "mobileOnly")
                      ? "Professional And\nDedicated Consulting Services..."
                      : "Data Architecture & Security"}
                  </h2>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__u1Sxr
                    )}
                  >
                    <React.Fragment>
                      <React.Fragment>
                        {
                          "Each client\u2019s sales and forecast data is siloed in a "
                        }
                      </React.Fragment>
                      <span
                        className={"plasmic_default__all plasmic_default__span"}
                        style={{ fontWeight: 700 }}
                      >
                        {"dedicated Neon database"}
                      </span>
                      <React.Fragment>
                        {
                          " \u2014 there are no shared schemas or connections between clients. Forecast generation occurs within each client\u2019s environment, ensuring complete data isolation and eliminating the risk of cross-connection. Hosting and encryption standards are managed under "
                        }
                      </React.Fragment>
                      <span
                        className={"plasmic_default__all plasmic_default__span"}
                        style={{ fontWeight: 700 }}
                      >
                        {"Neon and AWS SOC-2 / ISO-27001 compliance"}
                      </span>
                      <React.Fragment>{" frameworks. "}</React.Fragment>
                    </React.Fragment>
                  </div>
                </div>
              </div>
              <div
                data-plasmic-name={"row2"}
                data-plasmic-override={overrides.row2}
                className={classNames(projectcss.all, sty.row2)}
              >
                <div className={classNames(projectcss.all, sty.column__m35Gv)}>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__wbHgS)}
                  >
                    <PlasmicImg__
                      alt={""}
                      className={classNames(sty.img__s9C6U)}
                      displayHeight={"400px"}
                      displayMaxHeight={"none"}
                      displayMaxWidth={"none"}
                      displayMinHeight={"0"}
                      displayMinWidth={"0"}
                      displayWidth={"auto"}
                      loading={"lazy"}
                      src={{
                        src: "/plasmic/tsf_demand_website/images/kevinBBurkHeadshotJpg.jpg",
                        fullWidth: 1200,
                        fullHeight: 1577,
                        aspectRatio: undefined
                      }}
                    />
                  </div>
                </div>
                <div className={classNames(projectcss.all, sty.column__egFjz)}>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__nZdm)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        sty.freeBox___2Qxup
                      )}
                    />

                    <h3
                      className={classNames(
                        projectcss.all,
                        projectcss.h3,
                        projectcss.__wab_text,
                        sty.h3__aCb7G
                      )}
                    >
                      {"Founding and Leadership"}
                    </h3>
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text___2Fr0Z
                      )}
                    >
                      <React.Fragment>
                        <span
                          className={
                            "plasmic_default__all plasmic_default__span"
                          }
                          style={{ fontWeight: 700 }}
                        >
                          {"TSF"}
                        </span>
                        <React.Fragment>{" was founded by "}</React.Fragment>
                        <span
                          className={
                            "plasmic_default__all plasmic_default__span"
                          }
                          style={{ fontWeight: 700 }}
                        >
                          {"Kevin Burk"}
                        </span>
                        <React.Fragment>
                          {
                            ", the creator of the Model of Temporal inertia and architect of the TSF Seasonal Model Library. His research merges scientific rigor with practical implementation, transforming complex temporal theory into tools that business owners can actually use. "
                          }
                        </React.Fragment>
                      </React.Fragment>
                    </div>
                  </div>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__jdPut)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        sty.freeBox___8Mvys
                      )}
                    />

                    <h3
                      className={classNames(
                        projectcss.all,
                        projectcss.h3,
                        projectcss.__wab_text,
                        sty.h3__jXsEg
                      )}
                    >
                      {"Contact"}
                    </h3>
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__yFmzw
                      )}
                    >
                      <React.Fragment>
                        <span
                          className={
                            "plasmic_default__all plasmic_default__span"
                          }
                          style={{ fontWeight: 700 }}
                        >
                          {"Targeted Seasonal Forecasts Inc."}
                        </span>
                        <React.Fragment>
                          {
                            "\n264 Chapman Rd. Ste. 208 #24609\nNewark, Deleware 19702"
                          }
                        </React.Fragment>
                      </React.Fragment>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </div>
          <section
            data-plasmic-name={"columns"}
            data-plasmic-override={overrides.columns}
            className={classNames(projectcss.all, sty.columns)}
          >
            <div
              data-plasmic-name={"outer"}
              data-plasmic-override={overrides.outer}
              className={classNames(projectcss.all, sty.outer)}
            >
              <div
                data-plasmic-name={"container3"}
                data-plasmic-override={overrides.container3}
                className={classNames(projectcss.all, sty.container3)}
              >
                <div className={classNames(projectcss.all, sty.column__sbYyn)}>
                  <h2
                    className={classNames(
                      projectcss.all,
                      projectcss.h2,
                      projectcss.__wab_text,
                      sty.h2___9BuGa
                    )}
                  >
                    {"Want more information?"}
                  </h2>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__ftJpi
                    )}
                  >
                    {"Lorem ipsum dolor sit amet, consectetur adipiscing elit."}
                  </div>
                </div>
                <div className={classNames(projectcss.all, sty.column__bX8D)}>
                  <BaseButton
                    data-plasmic-name={"ariaButton"}
                    data-plasmic-override={overrides.ariaButton}
                    className={classNames("__wab_instance", sty.ariaButton)}
                    target={$props.openLinkInNewTab ? "_blank" : "_self"}
                  >
                    {false ? (
                      <div
                        data-plasmic-name={"softBackground10"}
                        data-plasmic-override={overrides.softBackground10}
                        className={classNames(
                          projectcss.all,
                          sty.softBackground10
                        )}
                      />
                    ) : null}
                    {false ? (
                      <div
                        data-plasmic-name={"border10"}
                        data-plasmic-override={overrides.border10}
                        className={classNames(projectcss.all, sty.border10)}
                      />
                    ) : null}
                    <div
                      data-plasmic-name={"interactionEffect10"}
                      data-plasmic-override={overrides.interactionEffect10}
                      className={classNames(
                        projectcss.all,
                        sty.interactionEffect10
                      )}
                    />

                    <div
                      className={classNames(projectcss.all, sty.freeBox__mkUng)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__toOt
                        )}
                      >
                        <CircleIcon
                          className={classNames(projectcss.all, sty.svg__sRk0Z)}
                          role={"img"}
                        />
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text___9LToQ
                        )}
                      >
                        {"Contact us"}
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__mcv8Y
                        )}
                      >
                        <ArrowRightSvgIcon
                          className={classNames(projectcss.all, sty.svg__gx3AH)}
                          role={"img"}
                        />
                      </div>
                    </div>
                  </BaseButton>
                </div>
              </div>
            </div>
          </section>
          <TsfFooter
            data-plasmic-name={"tsfFooter"}
            data-plasmic-override={overrides.tsfFooter}
            className={classNames("__wab_instance", sty.tsfFooter)}
          />
        </div>
      </div>
    </React.Fragment>
  );
}

const PlasmicDescendants = {
  root: [
    "root",
    "tsfDemandMainNavigation",
    "h1",
    "mainSection",
    "container4",
    "button",
    "mainSection2",
    "container5",
    "row2",
    "columns",
    "outer",
    "container3",
    "ariaButton",
    "softBackground10",
    "border10",
    "interactionEffect10",
    "tsfFooter"
  ],

  tsfDemandMainNavigation: ["tsfDemandMainNavigation"],
  h1: ["h1"],
  mainSection: [
    "mainSection",
    "container4",
    "button",
    "mainSection2",
    "container5",
    "row2"
  ],

  container4: ["container4", "button"],
  button: ["button"],
  mainSection2: ["mainSection2", "container5", "row2"],
  container5: ["container5"],
  row2: ["row2"],
  columns: [
    "columns",
    "outer",
    "container3",
    "ariaButton",
    "softBackground10",
    "border10",
    "interactionEffect10"
  ],

  outer: [
    "outer",
    "container3",
    "ariaButton",
    "softBackground10",
    "border10",
    "interactionEffect10"
  ],

  container3: [
    "container3",
    "ariaButton",
    "softBackground10",
    "border10",
    "interactionEffect10"
  ],

  ariaButton: [
    "ariaButton",
    "softBackground10",
    "border10",
    "interactionEffect10"
  ],

  softBackground10: ["softBackground10"],
  border10: ["border10"],
  interactionEffect10: ["interactionEffect10"],
  tsfFooter: ["tsfFooter"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicAboutTsf__ArgProps,
          internalVariantPropNames: PlasmicAboutTsf__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicAboutTsf__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicAboutTsf";
  } else {
    func.displayName = `PlasmicAboutTsf.${nodeName}`;
  }
  return func;
}

export const PlasmicAboutTsf = Object.assign(
  // Top-level PlasmicAboutTsf renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    tsfDemandMainNavigation: makeNodeComponent("tsfDemandMainNavigation"),
    h1: makeNodeComponent("h1"),
    mainSection: makeNodeComponent("mainSection"),
    container4: makeNodeComponent("container4"),
    button: makeNodeComponent("button"),
    mainSection2: makeNodeComponent("mainSection2"),
    container5: makeNodeComponent("container5"),
    row2: makeNodeComponent("row2"),
    columns: makeNodeComponent("columns"),
    outer: makeNodeComponent("outer"),
    container3: makeNodeComponent("container3"),
    ariaButton: makeNodeComponent("ariaButton"),
    softBackground10: makeNodeComponent("softBackground10"),
    border10: makeNodeComponent("border10"),
    interactionEffect10: makeNodeComponent("interactionEffect10"),
    tsfFooter: makeNodeComponent("tsfFooter"),
    // Metadata about props expected for PlasmicAboutTsf
    internalVariantProps: PlasmicAboutTsf__VariantProps,
    internalArgProps: PlasmicAboutTsf__ArgProps,
    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicAboutTsf;
/* prettier-ignore-end */
