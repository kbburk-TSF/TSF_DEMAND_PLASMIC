/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 8yhBRaKsBf3R2wKMhT5dUU
// Component: pPnx7cCl0iri
import * as React from "react";
import Head from "next/head";
import { useRouter } from "next/router";
import {
  PlasmicImg as PlasmicImg__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  hasVariant
} from "@plasmicapp/react-web";
import { useDataEnv } from "@plasmicapp/react-web/lib/host";
import TsfDemandMainNavigation from "../../TsfDemandMainNavigation"; // plasmic-import: RS9jruOWtFtt/component
import Button from "../../Button"; // plasmic-import: -U7nCsYlsFbS/component
import Button2 from "../../Button2"; // plasmic-import: IsImc8gJBadG/component
import TsfFooter from "../../TsfFooter"; // plasmic-import: NmgYw5lHKANx/component
import BlogPosts from "../../BlogPosts"; // plasmic-import: t8iMRGE7O8dB/component
import CtaBlock from "../../CtaBlock"; // plasmic-import: qoTEPcEAYg5b/component
import HeroSection from "../../HeroSection"; // plasmic-import: JNdKyXMmIYn1/component
import { _useGlobalVariants } from "./plasmic"; // plasmic-import: 8yhBRaKsBf3R2wKMhT5dUU/projectModule
import { _useStyleTokens } from "./PlasmicStyleTokensProvider"; // plasmic-import: 8yhBRaKsBf3R2wKMhT5dUU/styleTokensProvider
import "@plasmicapp/react-web/lib/plasmic.css";
import projectcss from "./plasmic.module.css"; // plasmic-import: 8yhBRaKsBf3R2wKMhT5dUU/projectcss
import sty from "./PlasmicHomepage.module.css"; // plasmic-import: pPnx7cCl0iri/css
import CircleIcon from "./icons/PlasmicIcon__Circle"; // plasmic-import: iCnGomX0kBnc/icon
import Icon4Icon from "./icons/PlasmicIcon__Icon4"; // plasmic-import: s0pSL1_dtWEm/icon
import Icon11Icon from "./icons/PlasmicIcon__Icon11"; // plasmic-import: e15IDclT0vTC/icon
import Icon8Icon from "./icons/PlasmicIcon__Icon8"; // plasmic-import: FGJcG_uIECwR/icon
import Icon10Icon from "./icons/PlasmicIcon__Icon10"; // plasmic-import: WKmUSY2JMrqE/icon
import Icon13Icon from "./icons/PlasmicIcon__Icon13"; // plasmic-import: jJJqFQNMqxtj/icon

createPlasmicElementProxy;

export const PlasmicHomepage__VariantProps = new Array();

export const PlasmicHomepage__ArgProps = new Array();

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicHomepage__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );
  const $props = {
    ...args,
    ...variants
  };
  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  const globalVariants = _useGlobalVariants();
  const styleTokensClassNames = _useStyleTokens();
  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            styleTokensClassNames,
            sty.root
          )}
        >
          <TsfDemandMainNavigation
            data-plasmic-name={"tsfDemandMainNavigation"}
            data-plasmic-override={overrides.tsfDemandMainNavigation}
            className={classNames(
              "__wab_instance",
              sty.tsfDemandMainNavigation
            )}
          />

          <div className={classNames(projectcss.all, sty.freeBox__wUjrb)}>
            <div className={classNames(projectcss.all, sty.freeBox__cgm78)}>
              <div className={classNames(projectcss.all, sty.freeBox__eq8X9)}>
                <div className={classNames(projectcss.all, sty.freeBox__fFuWj)}>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__u9LG)}
                  >
                    <div
                      className={classNames(projectcss.all, sty.freeBox__p5IWi)}
                    >
                      <h1
                        className={classNames(
                          projectcss.all,
                          projectcss.h1,
                          projectcss.__wab_text,
                          sty.h1___4AZ0Y
                        )}
                      >
                        {hasVariant(globalVariants, "screen", "mobileOnly")
                          ? "Ready to accept or acquiesce willing."
                          : "Accuracy Made Simple.\nConfidence Made Certain."}
                      </h1>
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__pgx5Z
                        )}
                      >
                        {
                          "\r\nPowered by a breakthrough in forecasting science, Targeted Seasonal Forecasts deliver daily predictions with month-long horizons \u2014 and quantified confidence in every single value. The proprietary library of irregular seasonal models reveals objective patterns in the historical data. Each forecast value is selected from at least 800 different forecast models, based on historical patterns of accuracy. \r\n"
                        }
                      </div>
                      <Button
                        className={classNames(
                          "__wab_instance",
                          sty.button__x7Ciz
                        )}
                        color={"neutral"}
                        label={
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__epLkg
                            )}
                          >
                            {"Try it yourself"}
                          </div>
                        }
                        onClick={async event => {
                          const $steps = {};
                          $steps["goToTsfEngineDemo"] = true
                            ? (() => {
                                const actionArgs = { destination: `/demo` };
                                return (({ destination }) => {
                                  if (
                                    typeof destination === "string" &&
                                    destination.startsWith("#")
                                  ) {
                                    document
                                      .getElementById(destination.substr(1))
                                      .scrollIntoView({ behavior: "smooth" });
                                  } else {
                                    __nextRouter?.push(destination);
                                  }
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                          if (
                            $steps["goToTsfEngineDemo"] != null &&
                            typeof $steps["goToTsfEngineDemo"] === "object" &&
                            typeof $steps["goToTsfEngineDemo"].then ===
                              "function"
                          ) {
                            $steps["goToTsfEngineDemo"] =
                              await $steps["goToTsfEngineDemo"];
                          }
                        }}
                        size={"extraLarge"}
                      />
                    </div>
                  </div>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__sBxuq)}
                  >
                    <PlasmicImg__
                      alt={""}
                      className={classNames(sty.img__frdAn)}
                      displayHeight={"auto"}
                      displayMaxHeight={"none"}
                      displayMaxWidth={"100%"}
                      displayMinHeight={"0"}
                      displayMinWidth={"0"}
                      displayWidth={"553px"}
                      loading={"lazy"}
                      src={{
                        src: "/plasmic/tsf_demand_website/images/tsfLogoStackedSvg.svg",
                        fullWidth: 612,
                        fullHeight: 515.2,
                        aspectRatio: 1.187888
                      }}
                    />
                  </div>
                </div>
              </div>
            </div>
          </div>
          <section
            data-plasmic-name={"features"}
            data-plasmic-override={overrides.features}
            className={classNames(projectcss.all, sty.features)}
          >
            <div className={classNames(projectcss.all, sty.column__kyp0L)}>
              <div className={classNames(projectcss.all, sty.freeBox__wkgCl)}>
                <div className={classNames(projectcss.all, sty.freeBox__xLiy7)}>
                  <div
                    className={classNames(projectcss.all, sty.columns__pilBw)}
                  >
                    <div
                      className={classNames(projectcss.all, sty.column__lal1L)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__vKCmP
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__ymhv5
                          )}
                        >
                          {"Run your business with foresight, not forecasts. "}
                        </div>
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__xuoZq
                          )}
                        >
                          <React.Fragment>
                            <span
                              className={
                                "plasmic_default__all plasmic_default__span"
                              }
                              style={{ fontStyle: "italic" }}
                            >
                              {
                                "Because knowing the month ahead is better than reacting to it."
                              }
                            </span>
                          </React.Fragment>
                        </div>
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__x5L2E
                          )}
                        >
                          <React.Fragment>
                            <span
                              className={
                                "plasmic_default__all plasmic_default__span"
                              }
                              style={{ color: "var(--token-Ry9eGMy91QvA)" }}
                            >
                              {
                                "Traditional models like ARIMA, SES, HWES, Prophet, and other ML approaches smooth out volatility, missing critical intra-month and intra-quarter changes. A monthly or quarterly forecast horizon usually resolves to a trend line with no guarantee of reliability."
                              }
                            </span>
                          </React.Fragment>
                        </div>
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__u7Y3G
                          )}
                        >
                          <React.Fragment>
                            <span
                              className={
                                "plasmic_default__all plasmic_default__span"
                              }
                              style={{ color: "var(--token-Ry9eGMy91QvA)" }}
                            >
                              {
                                "As you can see below, the traditional forecast values can't adjust to the real-world changes within the forecast period. "
                              }
                            </span>
                          </React.Fragment>
                        </div>
                        <PlasmicImg__
                          alt={""}
                          className={classNames(sty.img__eQu9)}
                          displayHeight={"auto"}
                          displayMaxHeight={"none"}
                          displayMaxWidth={"100%"}
                          displayMinHeight={"0"}
                          displayMinWidth={"0"}
                          displayWidth={"auto"}
                          loading={"lazy"}
                          src={{
                            src: "/plasmic/tsf_demand_website/images/aqiFlorida022023ClassicalPng.png",
                            fullWidth: 1200,
                            fullHeight: 437,
                            aspectRatio: undefined
                          }}
                        />

                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__snCAq
                          )}
                        >
                          <React.Fragment>
                            <span
                              className={
                                "plasmic_default__all plasmic_default__span"
                              }
                              style={{ color: "var(--token-Ry9eGMy91QvA)" }}
                            >
                              {"For each date, TSF Lite evaluates up to "}
                            </span>
                            <React.Fragment>{""}</React.Fragment>
                            <span
                              className={
                                "plasmic_default__all plasmic_default__span"
                              }
                              style={{
                                color: "var(--token-Ry9eGMy91QvA)",
                                fontWeight: 700
                              }}
                            >
                              {"800 forecast models"}
                            </span>
                            <React.Fragment>{""}</React.Fragment>
                            <span
                              className={
                                "plasmic_default__all plasmic_default__span"
                              }
                              style={{ color: "var(--token-Ry9eGMy91QvA)" }}
                            >
                              {
                                " (10 seasonal models x 2 series x 40 forecasts each) and selects the one with the best historical accuracy for that day. This independence allows the forecast to adjust immediately when real conditions change, without being chained to yesterday\u2019s trend."
                              }
                            </span>
                          </React.Fragment>
                        </div>
                        <PlasmicImg__
                          alt={""}
                          className={classNames(sty.img__jI2Rb)}
                          displayHeight={"auto"}
                          displayMaxHeight={"none"}
                          displayMaxWidth={"100%"}
                          displayMinHeight={"0"}
                          displayMinWidth={"0"}
                          displayWidth={"auto"}
                          loading={"lazy"}
                          src={{
                            src: "/plasmic/tsf_demand_website/images/aqiFlorida022023TsfPng.png",
                            fullWidth: 1200,
                            fullHeight: 437,
                            aspectRatio: undefined
                          }}
                        />

                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__igkuR
                          )}
                        >
                          <React.Fragment>
                            <span
                              className={
                                "plasmic_default__all plasmic_default__span"
                              }
                              style={{ color: "var(--token-Ry9eGMy91QvA)" }}
                            >
                              {"The "}
                            </span>
                            <React.Fragment>{""}</React.Fragment>
                            <span
                              className={
                                "plasmic_default__all plasmic_default__span"
                              }
                              style={{
                                color: "var(--token-Ry9eGMy91QvA)",
                                fontWeight: 700
                              }}
                            >
                              {"gold line"}
                            </span>
                            <React.Fragment>{""}</React.Fragment>
                            <span
                              className={
                                "plasmic_default__all plasmic_default__span"
                              }
                              style={{ color: "var(--token-Ry9eGMy91QvA)" }}
                            >
                              {" is the bulls-eye forecast. The "}
                            </span>
                            <React.Fragment>{""}</React.Fragment>
                            <span
                              className={
                                "plasmic_default__all plasmic_default__span"
                              }
                              style={{
                                color: "var(--token-Ry9eGMy91QvA)",
                                fontWeight: 700
                              }}
                            >
                              {"green zone"}
                            </span>
                            <React.Fragment>{""}</React.Fragment>
                            <span
                              className={
                                "plasmic_default__all plasmic_default__span"
                              }
                              style={{ color: "var(--token-Ry9eGMy91QvA)" }}
                            >
                              {
                                " is your target range \u2014 an accuracy band built from real historical performance. Together, they give you clarity: where the future is most likely to land. "
                              }
                            </span>
                          </React.Fragment>
                        </div>
                        <Button2
                          data-plasmic-name={"button2"}
                          data-plasmic-override={overrides.button2}
                          className={classNames("__wab_instance", sty.button2)}
                          color={"tsfDark"}
                          end={
                            <Icon4Icon
                              className={classNames(
                                projectcss.all,
                                sty.svg__hoUbu
                              )}
                              role={"img"}
                            />
                          }
                          iconEnd={true}
                          label={
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__jYvrq
                              )}
                            >
                              {"See how it on real data "}
                            </div>
                          }
                          linkTo={`/demo`}
                          start={
                            <CircleIcon
                              className={classNames(
                                projectcss.all,
                                sty.svg__sijhA
                              )}
                              role={"img"}
                            />
                          }
                        />
                      </div>
                    </div>
                  </div>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__dRzR7)}
                  >
                    <div
                      className={classNames(projectcss.all, sty.freeBox__w3LN)}
                    >
                      <div
                        data-plasmic-name={"foreground3"}
                        data-plasmic-override={overrides.foreground3}
                        className={classNames(projectcss.all, sty.foreground3)}
                      >
                        <h2
                          data-plasmic-name={"h2"}
                          data-plasmic-override={overrides.h2}
                          className={classNames(
                            projectcss.all,
                            projectcss.h2,
                            projectcss.__wab_text,
                            sty.h2
                          )}
                        >
                          {"Fewer Stockouts. Less Overstock. No Guessing. "}
                        </h2>
                      </div>
                      <div
                        data-plasmic-name={"foreground2"}
                        data-plasmic-override={overrides.foreground2}
                        className={classNames(projectcss.all, sty.foreground2)}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__zqeJm
                          )}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__ipvVr
                            )}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__gKrE5
                              )}
                            >
                              <Icon11Icon
                                className={classNames(
                                  projectcss.all,
                                  sty.svg__cF0D
                                )}
                                role={"img"}
                              />
                            </div>
                            {false ? (
                              <div
                                className={classNames(
                                  projectcss.all,
                                  sty.freeBox__mDkWx
                                )}
                              >
                                <Icon8Icon
                                  className={classNames(
                                    projectcss.all,
                                    sty.svg__k9Emh
                                  )}
                                  role={"img"}
                                />
                              </div>
                            ) : null}
                            <div
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__uuD3S
                              )}
                            >
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__lB89N
                                )}
                              >
                                {"Start each month with clarity."}
                              </div>
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text___19U5Z
                                )}
                              >
                                {
                                  "The green zone defines your safe operating range for each day \u2014 your best- and worst-case expectations based on real data. "
                                }
                              </div>
                            </div>
                          </div>
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__p4Bp
                            )}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__wnsAu
                              )}
                            >
                              <Icon10Icon
                                className={classNames(
                                  projectcss.all,
                                  sty.svg___1AUc5
                                )}
                                role={"img"}
                              />
                            </div>
                            {false ? (
                              <div
                                className={classNames(
                                  projectcss.all,
                                  sty.freeBox__qrP5I
                                )}
                              >
                                <Icon8Icon
                                  className={classNames(
                                    projectcss.all,
                                    sty.svg__h7Kza
                                  )}
                                  role={"img"}
                                />
                              </div>
                            ) : null}
                            <div
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__lTPre
                              )}
                            >
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__feh6
                                )}
                              >
                                {"Watch volatility, not just direction."}
                              </div>
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__uqEnl
                                )}
                              >
                                {
                                  "When the band widens, expect more variability \u2014\u00a0it's your signal to build flexibility into cash flow or supply. "
                                }
                              </div>
                            </div>
                          </div>
                        </div>
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__pnKIm
                          )}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__vb3P7
                            )}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__ghRie
                              )}
                            >
                              <Icon8Icon
                                className={classNames(
                                  projectcss.all,
                                  sty.svg___1Hz1S
                                )}
                                role={"img"}
                              />
                            </div>
                            {false ? (
                              <div
                                className={classNames(
                                  projectcss.all,
                                  sty.freeBox__poUlg
                                )}
                              >
                                <Icon8Icon
                                  className={classNames(
                                    projectcss.all,
                                    sty.svg__uoqWc
                                  )}
                                  role={"img"}
                                />
                              </div>
                            ) : null}
                            <div
                              className={classNames(
                                projectcss.all,
                                sty.freeBox___7L319
                              )}
                            >
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__ht21K
                                )}
                              >
                                {
                                  "Plan inventory, ads, and staffing within the band. "
                                }
                              </div>
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__tDctR
                                )}
                              >
                                {
                                  "The top of the band is the strong demand scenario. The bottom of the band is the conservative scenario. Plan your orders and budgets around the range that fits your risk tolerance. "
                                }
                              </div>
                            </div>
                          </div>
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__svIu5
                            )}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__cxlR
                              )}
                            >
                              <Icon13Icon
                                className={classNames(
                                  projectcss.all,
                                  sty.svg__ww61S
                                )}
                                role={"img"}
                              />
                            </div>
                            {false ? (
                              <div
                                className={classNames(
                                  projectcss.all,
                                  sty.freeBox__exUtm
                                )}
                              >
                                <Icon8Icon
                                  className={classNames(
                                    projectcss.all,
                                    sty.svg___1R2Yj
                                  )}
                                  role={"img"}
                                />
                              </div>
                            ) : null}
                            <div
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__aZmNv
                              )}
                            >
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text___2FrMg
                                )}
                              >
                                {"Measure signal vs. noise."}
                              </div>
                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text__xINlD
                                )}
                              >
                                {
                                  "If actual results stay inside the band, you're fine. If they consistently move above or below it, something has genuinely changed \u2014 that's a planning insight for next month, not a daily fire drill."
                                }
                              </div>
                            </div>
                          </div>
                        </div>
                      </div>
                    </div>
                  </div>
                </div>
                <div className={classNames(projectcss.all, sty.columns__oxRvY)}>
                  <div
                    className={classNames(projectcss.all, sty.column__ddl3J)}
                  >
                    <h1
                      className={classNames(
                        projectcss.all,
                        projectcss.h1,
                        projectcss.__wab_text,
                        sty.h1__k7FYk
                      )}
                    >
                      {"TSF Lite App"}
                    </h1>
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__ljGy
                      )}
                    >
                      {
                        "Forecast inside Shopify. No setup, no spreadsheets, and no effort. "
                      }
                    </div>
                    <Button
                      className={classNames(
                        "__wab_instance",
                        sty.button__isXIr
                      )}
                      color={"neutral"}
                      label={
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__rFsgt
                          )}
                        >
                          {"TSF Lite App"}
                        </div>
                      }
                      linkTo={`/tsf-lite`}
                      onClick={async event => {
                        const $steps = {};
                      }}
                    />
                  </div>
                  <div
                    className={classNames(projectcss.all, sty.column__ik2Xz)}
                  >
                    <h1
                      className={classNames(
                        projectcss.all,
                        projectcss.h1,
                        projectcss.__wab_text,
                        sty.h1___83SDs
                      )}
                    >
                      {"Case Study Program"}
                    </h1>
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__uEoG
                      )}
                    >
                      {
                        "Run your business with foresight, not forecasts. Join the TSF Lite Case Study Program. "
                      }
                    </div>
                    <Button
                      className={classNames("__wab_instance", sty.button__iM1X)}
                      color={"neutral"}
                      label={
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__wMxo5
                          )}
                        >
                          {"Apply to Join the Case Study Program"}
                        </div>
                      }
                      linkTo={`/case-studies`}
                      onClick={async event => {
                        const $steps = {};
                      }}
                    />
                  </div>
                  <div
                    className={classNames(projectcss.all, sty.column__jlzoJ)}
                  >
                    <h1
                      className={classNames(
                        projectcss.all,
                        projectcss.h1,
                        projectcss.__wab_text,
                        sty.h1__vCxpA
                      )}
                    >
                      {"Discover the Science"}
                    </h1>
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__qyzbX
                      )}
                    >
                      {
                        "TSF forecasts use the Model of Temporal Inertia to achieve what traditional forecasts can\u2019t. "
                      }
                    </div>
                    <Button
                      className={classNames(
                        "__wab_instance",
                        sty.button__b1Igq
                      )}
                      color={"neutral"}
                      label={
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__oejpO
                          )}
                        >
                          {"Explore the Science "}
                        </div>
                      }
                      linkTo={`/science`}
                      onClick={async event => {
                        const $steps = {};
                      }}
                    />
                  </div>
                  <div className={classNames(projectcss.all, sty.column__fGkB)}>
                    <h1
                      className={classNames(
                        projectcss.all,
                        projectcss.h1,
                        projectcss.__wab_text,
                        sty.h1__hb1Qy
                      )}
                    >
                      {"Invest in the Future"}
                    </h1>
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__lzxV
                      )}
                    >
                      {
                        "Partner with TSF to bring next-generation forecasting to every data-driven business."
                      }
                    </div>
                    <Button
                      className={classNames(
                        "__wab_instance",
                        sty.button__c8EMf
                      )}
                      color={"neutral"}
                      label={
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text___5RfiT
                          )}
                        >
                          {"Investment Opportunity"}
                        </div>
                      }
                      linkTo={`/investment`}
                      onClick={async event => {
                        const $steps = {};
                      }}
                    />
                  </div>
                </div>
              </div>
            </div>
          </section>
          <TsfFooter
            data-plasmic-name={"tsfFooter"}
            data-plasmic-override={overrides.tsfFooter}
            className={classNames("__wab_instance", sty.tsfFooter)}
          />

          <BlogPosts
            data-plasmic-name={"blogPosts"}
            data-plasmic-override={overrides.blogPosts}
            className={classNames("__wab_instance", sty.blogPosts)}
          />

          <CtaBlock
            data-plasmic-name={"ctaBlock"}
            data-plasmic-override={overrides.ctaBlock}
            className={classNames("__wab_instance", sty.ctaBlock)}
          />

          <HeroSection
            data-plasmic-name={"heroSection"}
            data-plasmic-override={overrides.heroSection}
            className={classNames("__wab_instance", sty.heroSection)}
          />
        </div>
      </div>
    </React.Fragment>
  );
}

const PlasmicDescendants = {
  root: [
    "root",
    "tsfDemandMainNavigation",
    "features",
    "button2",
    "foreground3",
    "h2",
    "foreground2",
    "tsfFooter",
    "blogPosts",
    "ctaBlock",
    "heroSection"
  ],

  tsfDemandMainNavigation: ["tsfDemandMainNavigation"],
  features: ["features", "button2", "foreground3", "h2", "foreground2"],
  button2: ["button2"],
  foreground3: ["foreground3", "h2"],
  h2: ["h2"],
  foreground2: ["foreground2"],
  tsfFooter: ["tsfFooter"],
  blogPosts: ["blogPosts"],
  ctaBlock: ["ctaBlock"],
  heroSection: ["heroSection"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicHomepage__ArgProps,
          internalVariantPropNames: PlasmicHomepage__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicHomepage__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicHomepage";
  } else {
    func.displayName = `PlasmicHomepage.${nodeName}`;
  }
  return func;
}

export const PlasmicHomepage = Object.assign(
  // Top-level PlasmicHomepage renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    tsfDemandMainNavigation: makeNodeComponent("tsfDemandMainNavigation"),
    features: makeNodeComponent("features"),
    button2: makeNodeComponent("button2"),
    foreground3: makeNodeComponent("foreground3"),
    h2: makeNodeComponent("h2"),
    foreground2: makeNodeComponent("foreground2"),
    tsfFooter: makeNodeComponent("tsfFooter"),
    blogPosts: makeNodeComponent("blogPosts"),
    ctaBlock: makeNodeComponent("ctaBlock"),
    heroSection: makeNodeComponent("heroSection"),
    // Metadata about props expected for PlasmicHomepage
    internalVariantProps: PlasmicHomepage__VariantProps,
    internalArgProps: PlasmicHomepage__ArgProps,
    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicHomepage;
/* prettier-ignore-end */
