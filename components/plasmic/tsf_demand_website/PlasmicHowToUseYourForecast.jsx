/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 8yhBRaKsBf3R2wKMhT5dUU
// Component: udcHmc-MXrK7
import * as React from "react";
import { useRouter } from "next/router";
import {
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts
} from "@plasmicapp/react-web";
import { useDataEnv } from "@plasmicapp/react-web/lib/host";
import { _useStyleTokens } from "./PlasmicStyleTokensProvider"; // plasmic-import: 8yhBRaKsBf3R2wKMhT5dUU/styleTokensProvider
import "@plasmicapp/react-web/lib/plasmic.css";
import projectcss from "./plasmic.module.css"; // plasmic-import: 8yhBRaKsBf3R2wKMhT5dUU/projectcss
import sty from "./PlasmicHowToUseYourForecast.module.css"; // plasmic-import: udcHmc-MXrK7/css
import Icon11Icon from "./icons/PlasmicIcon__Icon11"; // plasmic-import: e15IDclT0vTC/icon
import Icon8Icon from "./icons/PlasmicIcon__Icon8"; // plasmic-import: FGJcG_uIECwR/icon
import Icon10Icon from "./icons/PlasmicIcon__Icon10"; // plasmic-import: WKmUSY2JMrqE/icon
import Icon13Icon from "./icons/PlasmicIcon__Icon13"; // plasmic-import: jJJqFQNMqxtj/icon

createPlasmicElementProxy;

export const PlasmicHowToUseYourForecast__VariantProps = new Array();

export const PlasmicHowToUseYourForecast__ArgProps = new Array();

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicHowToUseYourForecast__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );
  const $props = {
    ...args,
    ...variants
  };
  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  const styleTokensClassNames = _useStyleTokens();
  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        styleTokensClassNames,
        sty.root
      )}
    >
      <div className={classNames(projectcss.all, sty.freeBox__rzkUf)}>
        <div
          data-plasmic-name={"foreground3"}
          data-plasmic-override={overrides.foreground3}
          className={classNames(projectcss.all, sty.foreground3)}
        >
          <h2
            data-plasmic-name={"h2"}
            data-plasmic-override={overrides.h2}
            className={classNames(
              projectcss.all,
              projectcss.h2,
              projectcss.__wab_text,
              sty.h2
            )}
          >
            {"Fewer Stockouts. Less Overstock. No Guessing. "}
          </h2>
        </div>
        <div
          data-plasmic-name={"foreground2"}
          data-plasmic-override={overrides.foreground2}
          className={classNames(projectcss.all, sty.foreground2)}
        >
          <div className={classNames(projectcss.all, sty.freeBox__dcoJ8)}>
            <div className={classNames(projectcss.all, sty.freeBox__y7Hpg)}>
              <div className={classNames(projectcss.all, sty.freeBox__kezJ8)}>
                <Icon11Icon
                  className={classNames(projectcss.all, sty.svg___4BnS4)}
                  role={"img"}
                />
              </div>
              {false ? (
                <div className={classNames(projectcss.all, sty.freeBox__b2HgL)}>
                  <Icon8Icon
                    className={classNames(projectcss.all, sty.svg__himZ3)}
                    role={"img"}
                  />
                </div>
              ) : null}
              <div className={classNames(projectcss.all, sty.freeBox__rxGyc)}>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__tRtYa
                  )}
                >
                  {"Start each month with clarity."}
                </div>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__qar0R
                  )}
                >
                  {
                    "The green zone defines your safe operating range for each day \u2014 your best- and worst-case expectations based on real data. "
                  }
                </div>
              </div>
            </div>
            <div className={classNames(projectcss.all, sty.freeBox__pwAu)}>
              <div className={classNames(projectcss.all, sty.freeBox__wdocq)}>
                <Icon10Icon
                  className={classNames(projectcss.all, sty.svg__iuQr5)}
                  role={"img"}
                />
              </div>
              {false ? (
                <div className={classNames(projectcss.all, sty.freeBox__wxRq5)}>
                  <Icon8Icon
                    className={classNames(projectcss.all, sty.svg__eM5V)}
                    role={"img"}
                  />
                </div>
              ) : null}
              <div className={classNames(projectcss.all, sty.freeBox__p76W)}>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__v7OcE
                  )}
                >
                  {"Watch volatility, not just direction."}
                </div>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__idZpy
                  )}
                >
                  {
                    "When the band widens, expect more variability \u2014\u00a0it's your signal to build flexibility into cash flow or supply. "
                  }
                </div>
              </div>
            </div>
          </div>
          <div className={classNames(projectcss.all, sty.freeBox__gqjqG)}>
            <div className={classNames(projectcss.all, sty.freeBox__jdzex)}>
              <div className={classNames(projectcss.all, sty.freeBox__tr1O8)}>
                <Icon8Icon
                  className={classNames(projectcss.all, sty.svg__xEx)}
                  role={"img"}
                />
              </div>
              {false ? (
                <div className={classNames(projectcss.all, sty.freeBox__ugNQu)}>
                  <Icon8Icon
                    className={classNames(projectcss.all, sty.svg__f4T5Q)}
                    role={"img"}
                  />
                </div>
              ) : null}
              <div className={classNames(projectcss.all, sty.freeBox__xTs9K)}>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text___4VRk0
                  )}
                >
                  {"Plan inventory, ads, and staffing within the band. "}
                </div>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__p4PJg
                  )}
                >
                  {
                    "The top of the band is the strong demand scenario. The bottom of the band is the conservative scenario. Plan your orders and budgets around the range that fits your risk tolerance. "
                  }
                </div>
              </div>
            </div>
            <div className={classNames(projectcss.all, sty.freeBox___3EpGk)}>
              <div className={classNames(projectcss.all, sty.freeBox__ruxzE)}>
                <Icon13Icon
                  className={classNames(projectcss.all, sty.svg__gEiK)}
                  role={"img"}
                />
              </div>
              {false ? (
                <div
                  className={classNames(projectcss.all, sty.freeBox___0Lmrn)}
                >
                  <Icon8Icon
                    className={classNames(projectcss.all, sty.svg__kXydi)}
                    role={"img"}
                  />
                </div>
              ) : null}
              <div className={classNames(projectcss.all, sty.freeBox__fuV)}>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__kM11K
                  )}
                >
                  {"Measure signal vs. noise."}
                </div>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__vv08N
                  )}
                >
                  {
                    "If actual results stay inside the band, you're fine. If they consistently move above or below it, something has genuinely changed \u2014 that's a planning insight for next month, not a daily fire drill."
                  }
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
}

const PlasmicDescendants = {
  root: ["root", "foreground3", "h2", "foreground2"],
  foreground3: ["foreground3", "h2"],
  h2: ["h2"],
  foreground2: ["foreground2"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicHowToUseYourForecast__ArgProps,
          internalVariantPropNames: PlasmicHowToUseYourForecast__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicHowToUseYourForecast__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicHowToUseYourForecast";
  } else {
    func.displayName = `PlasmicHowToUseYourForecast.${nodeName}`;
  }
  return func;
}

export const PlasmicHowToUseYourForecast = Object.assign(
  // Top-level PlasmicHowToUseYourForecast renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    foreground3: makeNodeComponent("foreground3"),
    h2: makeNodeComponent("h2"),
    foreground2: makeNodeComponent("foreground2"),
    // Metadata about props expected for PlasmicHowToUseYourForecast
    internalVariantProps: PlasmicHowToUseYourForecast__VariantProps,
    internalArgProps: PlasmicHowToUseYourForecast__ArgProps
  }
);

export default PlasmicHowToUseYourForecast;
/* prettier-ignore-end */
