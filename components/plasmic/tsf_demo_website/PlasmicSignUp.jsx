/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: tapQSmgujw7smcBwiTayug
// Component: FwRK4fcgd0I0
import * as React from "react";
import Head from "next/head";
import { useRouter } from "next/router";
import {
  PlasmicImg as PlasmicImg__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  generateStateOnChangeProp,
  hasVariant,
  useDollarState
} from "@plasmicapp/react-web";
import { useDataEnv } from "@plasmicapp/react-web/lib/host";
import Header from "../../Header"; // plasmic-import: 0XA8z88jHqGh/component
import TextField from "../../TextField"; // plasmic-import: I2tb_OEpC2kr/component
import Checkbox from "../../Checkbox"; // plasmic-import: MXjsusxMCbdw/component
import Button from "../../Button"; // plasmic-import: BmK5KSjeUCoq/component
import Footer from "../../Footer"; // plasmic-import: _as8O7FbI-4s/component
import { _useGlobalVariants } from "./plasmic"; // plasmic-import: tapQSmgujw7smcBwiTayug/projectModule
import { _useStyleTokens } from "./PlasmicStyleTokensProvider"; // plasmic-import: tapQSmgujw7smcBwiTayug/styleTokensProvider
import "@plasmicapp/react-web/lib/plasmic.css";
import projectcss from "./plasmic.module.css"; // plasmic-import: tapQSmgujw7smcBwiTayug/projectcss
import sty from "./PlasmicSignUp.module.css"; // plasmic-import: FwRK4fcgd0I0/css

createPlasmicElementProxy;

export const PlasmicSignUp__VariantProps = new Array();

export const PlasmicSignUp__ArgProps = new Array();

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicSignUp__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );
  const $props = {
    ...args,
    ...variants
  };
  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  const globalVariants = _useGlobalVariants();
  const stateSpecs = React.useMemo(
    () => [
      {
        path: "name.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "email.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "agree.isSelected",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "phone.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      }
    ],

    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });
  const styleTokensClassNames = _useStyleTokens();
  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            styleTokensClassNames,
            sty.root
          )}
        >
          <Header
            data-plasmic-name={"header"}
            data-plasmic-override={overrides.header}
            className={classNames("__wab_instance", sty.header)}
          />

          <div
            data-plasmic-name={"mainSection"}
            data-plasmic-override={overrides.mainSection}
            className={classNames(projectcss.all, sty.mainSection)}
          >
            <div
              data-plasmic-name={"pageBanner"}
              data-plasmic-override={overrides.pageBanner}
              className={classNames(projectcss.all, sty.pageBanner)}
            >
              <div className={classNames(projectcss.all, sty.freeBox__oWne4)}>
                <div className={classNames(projectcss.all, sty.columns__mTfk)}>
                  <div
                    className={classNames(projectcss.all, sty.column___6Gcjq)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        sty.freeBox___32C0S
                      )}
                    >
                      <h1
                        data-plasmic-name={"h1"}
                        data-plasmic-override={overrides.h1}
                        className={classNames(
                          projectcss.all,
                          projectcss.h1,
                          projectcss.__wab_text,
                          sty.h1
                        )}
                      >
                        {"Sign Up"}
                      </h1>
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__wUz3V
                        )}
                      >
                        {
                          "Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam,"
                        }
                      </div>
                    </div>
                  </div>
                  <div
                    className={classNames(projectcss.all, sty.column__xzfjp)}
                  >
                    <PlasmicImg__
                      alt={""}
                      className={classNames(sty.img__tBBr)}
                      displayHeight={"auto"}
                      displayMaxHeight={"none"}
                      displayMaxWidth={
                        hasVariant(globalVariants, "screen", "mobileOnly")
                          ? "100%"
                          : "100%"
                      }
                      displayMinHeight={"0"}
                      displayMinWidth={"0"}
                      displayWidth={"auto"}
                      loading={
                        hasVariant(globalVariants, "screen", "mobileOnly")
                          ? "lazy"
                          : "lazy"
                      }
                      src={
                        hasVariant(globalVariants, "screen", "mobileOnly")
                          ? {
                              src: "/plasmic/tsf_demo_website/images/stephenPhillipsHostreviewsCoUk3Mhgvrk4TjMUnsplashJpg.jpg",
                              fullWidth: 1920,
                              fullHeight: 1280,
                              aspectRatio: undefined
                            }
                          : {
                              src: "/plasmic/tsf_demo_website/images/tiffanyTertipesNxcs8Wwj9J0UnsplashJpg.jpg",
                              fullWidth: 1920,
                              fullHeight: 1280,
                              aspectRatio: undefined
                            }
                      }
                    />
                  </div>
                </div>
              </div>
            </div>
            <div
              data-plasmic-name={"mainSection2"}
              data-plasmic-override={overrides.mainSection2}
              className={classNames(projectcss.all, sty.mainSection2)}
            >
              <div className={classNames(projectcss.all, sty.columns__xD0Yu)}>
                <div className={classNames(projectcss.all, sty.column__afFxO)}>
                  <form
                    data-plasmic-name={"form"}
                    data-plasmic-override={overrides.form}
                    action={"https://example.com"}
                    className={classNames(projectcss.all, sty.form)}
                  >
                    <h3
                      data-plasmic-name={"h3"}
                      data-plasmic-override={overrides.h3}
                      className={classNames(
                        projectcss.all,
                        projectcss.h3,
                        projectcss.__wab_text,
                        sty.h3
                      )}
                    >
                      {"Register"}
                    </h3>
                    <TextField
                      data-plasmic-name={"name"}
                      data-plasmic-override={overrides.name}
                      className={classNames("__wab_instance", sty.name)}
                      label={"Name"}
                      onChange={async (...eventArgs) => {
                        generateStateOnChangeProp($state, [
                          "name",
                          "value"
                        ]).apply(null, eventArgs);
                        if (
                          eventArgs.length > 1 &&
                          eventArgs[1] &&
                          eventArgs[1]._plasmic_state_init_
                        ) {
                          return;
                        }
                      }}
                      placeholder={"Your name..."}
                    />

                    <TextField
                      data-plasmic-name={"email"}
                      data-plasmic-override={overrides.email}
                      className={classNames("__wab_instance", sty.email)}
                      label={"Email"}
                      onChange={async (...eventArgs) => {
                        generateStateOnChangeProp($state, [
                          "email",
                          "value"
                        ]).apply(null, eventArgs);
                        if (
                          eventArgs.length > 1 &&
                          eventArgs[1] &&
                          eventArgs[1]._plasmic_state_init_
                        ) {
                          return;
                        }
                      }}
                      placeholder={"example@domain.com"}
                    />

                    <TextField
                      data-plasmic-name={"phone"}
                      data-plasmic-override={overrides.phone}
                      className={classNames("__wab_instance", sty.phone)}
                      label={"Phone"}
                      onChange={async (...eventArgs) => {
                        generateStateOnChangeProp($state, [
                          "phone",
                          "value"
                        ]).apply(null, eventArgs);
                        if (
                          eventArgs.length > 1 &&
                          eventArgs[1] &&
                          eventArgs[1]._plasmic_state_init_
                        ) {
                          return;
                        }
                      }}
                      placeholder={"555-555-5555"}
                    />

                    <Checkbox
                      data-plasmic-name={"agree"}
                      data-plasmic-override={overrides.agree}
                      className={classNames("__wab_instance", sty.agree)}
                      label={"Agree to terms of service?"}
                      onChange={async (...eventArgs) => {
                        generateStateOnChangeProp($state, [
                          "agree",
                          "isSelected"
                        ]).apply(null, eventArgs);
                        if (
                          eventArgs.length > 1 &&
                          eventArgs[1] &&
                          eventArgs[1]._plasmic_state_init_
                        ) {
                          return;
                        }
                      }}
                    />

                    <Button
                      data-plasmic-name={"submit"}
                      data-plasmic-override={overrides.submit}
                      className={classNames("__wab_instance", sty.submit)}
                      label={
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__e7Qwo
                          )}
                        >
                          {"Sign up"}
                        </div>
                      }
                      submitsForm={true}
                    />
                  </form>
                </div>
                <div className={classNames(projectcss.all, sty.column__k7Yu7)}>
                  <PlasmicImg__
                    alt={""}
                    className={classNames(sty.img__rBKeZ)}
                    displayHeight={"100%"}
                    displayMaxHeight={"none"}
                    displayMaxWidth={"100%"}
                    displayMinHeight={"0"}
                    displayMinWidth={"0"}
                    displayWidth={"100%"}
                    loading={"lazy"}
                    src={{
                      src: "/plasmic/tsf_demo_website/images/greenChameleonS9Cc2SKySjmUnsplashJpg.jpg",
                      fullWidth: 1920,
                      fullHeight: 1280,
                      aspectRatio: undefined
                    }}
                  />
                </div>
              </div>
            </div>
          </div>
          <Footer
            data-plasmic-name={"footer"}
            data-plasmic-override={overrides.footer}
            className={classNames("__wab_instance", sty.footer)}
          />
        </div>
      </div>
    </React.Fragment>
  );
}

const PlasmicDescendants = {
  root: [
    "root",
    "header",
    "mainSection",
    "pageBanner",
    "h1",
    "mainSection2",
    "form",
    "h3",
    "name",
    "email",
    "phone",
    "agree",
    "submit",
    "footer"
  ],

  header: ["header"],
  mainSection: [
    "mainSection",
    "pageBanner",
    "h1",
    "mainSection2",
    "form",
    "h3",
    "name",
    "email",
    "phone",
    "agree",
    "submit"
  ],

  pageBanner: ["pageBanner", "h1"],
  h1: ["h1"],
  mainSection2: [
    "mainSection2",
    "form",
    "h3",
    "name",
    "email",
    "phone",
    "agree",
    "submit"
  ],

  form: ["form", "h3", "name", "email", "phone", "agree", "submit"],
  h3: ["h3"],
  name: ["name"],
  email: ["email"],
  phone: ["phone"],
  agree: ["agree"],
  submit: ["submit"],
  footer: ["footer"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicSignUp__ArgProps,
          internalVariantPropNames: PlasmicSignUp__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicSignUp__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicSignUp";
  } else {
    func.displayName = `PlasmicSignUp.${nodeName}`;
  }
  return func;
}

export const PlasmicSignUp = Object.assign(
  // Top-level PlasmicSignUp renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    header: makeNodeComponent("header"),
    mainSection: makeNodeComponent("mainSection"),
    pageBanner: makeNodeComponent("pageBanner"),
    h1: makeNodeComponent("h1"),
    mainSection2: makeNodeComponent("mainSection2"),
    form: makeNodeComponent("form"),
    h3: makeNodeComponent("h3"),
    _name: makeNodeComponent("name"),
    email: makeNodeComponent("email"),
    phone: makeNodeComponent("phone"),
    agree: makeNodeComponent("agree"),
    submit: makeNodeComponent("submit"),
    footer: makeNodeComponent("footer"),
    // Metadata about props expected for PlasmicSignUp
    internalVariantProps: PlasmicSignUp__VariantProps,
    internalArgProps: PlasmicSignUp__ArgProps,
    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicSignUp;
/* prettier-ignore-end */
