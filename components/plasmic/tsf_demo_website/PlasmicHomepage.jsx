/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: tapQSmgujw7smcBwiTayug
// Component: jTXG3Regz125
import * as React from "react";
import Head from "next/head";
import { useRouter } from "next/router";
import {
  PlasmicImg as PlasmicImg__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  hasVariant
} from "@plasmicapp/react-web";
import { useDataEnv } from "@plasmicapp/react-web/lib/host";
import Header from "../../Header"; // plasmic-import: 0XA8z88jHqGh/component
import Button from "../../Button"; // plasmic-import: BmK5KSjeUCoq/component
import BlogPosts from "../../BlogPosts"; // plasmic-import: MiL8App_emDg/component
import CtaBlock from "../../CtaBlock"; // plasmic-import: XWoJFMRAhX-a/component
import HeroSection from "../../HeroSection"; // plasmic-import: asQL227ll1f6/component
import Footer from "../../Footer"; // plasmic-import: _as8O7FbI-4s/component
import { _useGlobalVariants } from "./plasmic"; // plasmic-import: tapQSmgujw7smcBwiTayug/projectModule
import { _useStyleTokens } from "./PlasmicStyleTokensProvider"; // plasmic-import: tapQSmgujw7smcBwiTayug/styleTokensProvider
import "@plasmicapp/react-web/lib/plasmic.css";
import projectcss from "./plasmic.module.css"; // plasmic-import: tapQSmgujw7smcBwiTayug/projectcss
import sty from "./PlasmicHomepage.module.css"; // plasmic-import: jTXG3Regz125/css

createPlasmicElementProxy;

export const PlasmicHomepage__VariantProps = new Array();

export const PlasmicHomepage__ArgProps = new Array();

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicHomepage__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );
  const $props = {
    ...args,
    ...variants
  };
  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  const globalVariants = _useGlobalVariants();
  const styleTokensClassNames = _useStyleTokens();
  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            styleTokensClassNames,
            sty.root
          )}
        >
          <div className={classNames(projectcss.all, sty.freeBox__l961H)}>
            <Header
              data-plasmic-name={"header"}
              data-plasmic-override={overrides.header}
              className={classNames("__wab_instance", sty.header)}
            />

            <div className={classNames(projectcss.all, sty.freeBox___44YNf)}>
              <div className={classNames(projectcss.all, sty.freeBox__tkktS)}>
                <div className={classNames(projectcss.all, sty.freeBox__jaSt4)}>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__djZij)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        sty.freeBox___3Gcs8
                      )}
                    >
                      <h1
                        className={classNames(
                          projectcss.all,
                          projectcss.h1,
                          projectcss.__wab_text,
                          sty.h1__cqPT
                        )}
                      >
                        {hasVariant(globalVariants, "screen", "mobileOnly")
                          ? "Ready to accept or acquiesce willing."
                          : "Accuracy Made Simple.\nConfidence Made Certain."}
                      </h1>
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__kmj72
                        )}
                      >
                        {
                          "Welcome to the future of time series forecasting. \n\n\r\nPowered by a breakthrough in forecasting science, Targeted Seasonal Forecasts deliver daily predictions with month-long horizons \u2014 and quantified confidence in every single value. The proprietary library of irregular seasonal models reveals objective patterns in the historical data. Each forecast value is selected from up to 2,500 different forecast models, based on historical patterns of accuracy. \r\n"
                        }
                      </div>
                      <Button
                        className={classNames(
                          "__wab_instance",
                          sty.button__u8N7I
                        )}
                        color={"neutral"}
                        label={
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text___7Dx1F
                            )}
                          >
                            {"Try it yourself"}
                          </div>
                        }
                        onClick={async event => {
                          const $steps = {};
                          $steps["goToTsfEngineDemo"] = true
                            ? (() => {
                                const actionArgs = { destination: `/engine` };
                                return (({ destination }) => {
                                  if (
                                    typeof destination === "string" &&
                                    destination.startsWith("#")
                                  ) {
                                    document
                                      .getElementById(destination.substr(1))
                                      .scrollIntoView({ behavior: "smooth" });
                                  } else {
                                    __nextRouter?.push(destination);
                                  }
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                          if (
                            $steps["goToTsfEngineDemo"] != null &&
                            typeof $steps["goToTsfEngineDemo"] === "object" &&
                            typeof $steps["goToTsfEngineDemo"].then ===
                              "function"
                          ) {
                            $steps["goToTsfEngineDemo"] = await $steps[
                              "goToTsfEngineDemo"
                            ];
                          }
                        }}
                        size={"extraLarge"}
                      />
                    </div>
                  </div>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__ftgRx)}
                  >
                    <PlasmicImg__
                      alt={""}
                      className={classNames(sty.img__ld3Y1)}
                      displayHeight={"auto"}
                      displayMaxHeight={"none"}
                      displayMaxWidth={"100%"}
                      displayMinHeight={"0"}
                      displayMinWidth={"0"}
                      displayWidth={"553px"}
                      loading={"lazy"}
                      src={{
                        src: "/plasmic/tsf_demo_website/images/tsfLogoStackedSvg.svg",
                        fullWidth: 612,
                        fullHeight: 515.2,
                        aspectRatio: 1.187888
                      }}
                    />
                  </div>
                </div>
              </div>
            </div>
          </div>
          <section
            data-plasmic-name={"features"}
            data-plasmic-override={overrides.features}
            className={classNames(projectcss.all, sty.features)}
          >
            <div className={classNames(projectcss.all, sty.column__pCy12)}>
              <h1
                className={classNames(
                  projectcss.all,
                  projectcss.h1,
                  projectcss.__wab_text,
                  sty.h1__eevss
                )}
              >
                {"Targeted Seasonal Forecasts vs. \nTraditional Forecasts"}
              </h1>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__eDZtq
                )}
              >
                {
                  "Traditional models like ARIMA, SES, HWES, Prophet, and other ML approaches smooth out volatility, missing critical intra-month and intra-quarter changes. A monthly or quarterly forecast horizon usually resolves to a trend line with no guarantee of reliability. Targeted Seasonal Forecasts test thousands of models against history to choose the most accurate forecast, date by date.\n\n\r\nHere\u2019s what a classical forecast looks like when forecasting daily car crashes in California for the month of October, 2016. The actual crashes for October 2016 are shown for comparison as the dotted line. "
                }
              </div>
              <PlasmicImg__
                alt={""}
                className={classNames(sty.img__fo6Yc)}
                displayHeight={"auto"}
                displayMaxHeight={"none"}
                displayMaxWidth={"100%"}
                displayMinHeight={"0"}
                displayMinWidth={"0"}
                displayWidth={"auto"}
                loading={"lazy"}
                src={{
                  src: "/plasmic/tsf_demo_website/images/classicalForecastsPng.png",
                  fullWidth: 1200,
                  fullHeight: 481,
                  aspectRatio: undefined
                }}
              />

              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__vrhW3
                )}
              >
                <React.Fragment>
                  <React.Fragment>{"Here's the "}</React.Fragment>
                  <span
                    className={"plasmic_default__all plasmic_default__span"}
                    style={{ fontWeight: 700 }}
                  >
                    {"Targeted Seasonal Forecast "}
                  </span>
                  <React.Fragment>
                    {
                      "for the same data. Because each forecast value for each date is forecast independently, the Targeted Seasonal Forecast is able to anticipate changes within the forecast period. And because the forecast value of each date is selected based on objective historical patterns of accuracy of more than 2,500 forecast models, you can be confident in the forecast values. "
                    }
                  </React.Fragment>
                </React.Fragment>
              </div>
              <PlasmicImg__
                alt={""}
                className={classNames(sty.img__lZzI)}
                displayHeight={"auto"}
                displayMaxHeight={"none"}
                displayMaxWidth={"100%"}
                displayMinHeight={"0"}
                displayMinWidth={"0"}
                displayWidth={"auto"}
                loading={"lazy"}
                src={{
                  src: "/plasmic/tsf_demo_website/images/targetedGoldPng.png",
                  fullWidth: 1200,
                  fullHeight: 481,
                  aspectRatio: undefined
                }}
              />

              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__qs6D
                )}
              >
                <React.Fragment>
                  <React.Fragment>{"The "}</React.Fragment>
                  <span
                    className={"plasmic_default__all plasmic_default__span"}
                    style={{ fontWeight: 700 }}
                  >
                    {"Gold Line"}
                  </span>
                  <React.Fragment>
                    {" is the bulls-eye forecast. The "}
                  </React.Fragment>
                  <span
                    className={"plasmic_default__all plasmic_default__span"}
                    style={{ fontWeight: 700 }}
                  >
                    {"Green Zone"}
                  </span>
                  <React.Fragment>
                    {
                      " is your target range \u2014 an accuracy band built from real historical performance. Together, they give you clarity: where the future is most likely to land."
                    }
                  </React.Fragment>
                </React.Fragment>
              </div>
              <PlasmicImg__
                alt={""}
                className={classNames(sty.img__fgL0F)}
                displayHeight={"auto"}
                displayMaxHeight={"none"}
                displayMaxWidth={"100%"}
                displayMinHeight={"0"}
                displayMinWidth={"0"}
                displayWidth={"auto"}
                loading={"lazy"}
                src={{
                  src: "/plasmic/tsf_demo_website/images/targetedGreenGoldPng2.png",
                  fullWidth: 1200,
                  fullHeight: 481,
                  aspectRatio: undefined
                }}
              />

              <div
                data-plasmic-name={"columns"}
                data-plasmic-override={overrides.columns}
                className={classNames(projectcss.all, sty.columns)}
              >
                <div className={classNames(projectcss.all, sty.column__u14FS)}>
                  <h1
                    className={classNames(
                      projectcss.all,
                      projectcss.h1,
                      projectcss.__wab_text,
                      sty.h1__vhygh
                    )}
                  >
                    {"Try it yourself."}
                  </h1>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__uyPE
                    )}
                  >
                    {
                      "Explore live demos with car crash data, air quality measures, and even stock market forecasts. See how the Gold Line and Green Zone adapt in real time."
                    }
                  </div>
                  <Button
                    className={classNames("__wab_instance", sty.button__hiv9D)}
                    color={"muted"}
                    label={
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__zbCrk
                        )}
                      >
                        {"TSF Engine Demo"}
                      </div>
                    }
                    onClick={async event => {
                      const $steps = {};
                      $steps["goToTsfEngineDemo"] = true
                        ? (() => {
                            const actionArgs = { destination: `/engine` };
                            return (({ destination }) => {
                              if (
                                typeof destination === "string" &&
                                destination.startsWith("#")
                              ) {
                                document
                                  .getElementById(destination.substr(1))
                                  .scrollIntoView({ behavior: "smooth" });
                              } else {
                                __nextRouter?.push(destination);
                              }
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["goToTsfEngineDemo"] != null &&
                        typeof $steps["goToTsfEngineDemo"] === "object" &&
                        typeof $steps["goToTsfEngineDemo"].then === "function"
                      ) {
                        $steps["goToTsfEngineDemo"] = await $steps[
                          "goToTsfEngineDemo"
                        ];
                      }
                    }}
                  />
                </div>
                <div className={classNames(projectcss.all, sty.column__b18Ra)}>
                  <h1
                    className={classNames(
                      projectcss.all,
                      projectcss.h1,
                      projectcss.__wab_text,
                      sty.h1__jle2
                    )}
                  >
                    {"Check out the science. "}
                  </h1>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__iwrBh
                    )}
                  >
                    {
                      "The Model of Temporal Inertia redefines how we forecast change over time \u2014 and challenges how human beings perceive time. "
                    }
                  </div>
                  <Button
                    className={classNames("__wab_instance", sty.button__dKfEt)}
                    color={"muted"}
                    label={
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__qB6S
                        )}
                      >
                        {"The Model of Temporal Inertia"}
                      </div>
                    }
                    onClick={async event => {
                      const $steps = {};
                      $steps["goToTheScience"] = true
                        ? (() => {
                            const actionArgs = { destination: `/science` };
                            return (({ destination }) => {
                              if (
                                typeof destination === "string" &&
                                destination.startsWith("#")
                              ) {
                                document
                                  .getElementById(destination.substr(1))
                                  .scrollIntoView({ behavior: "smooth" });
                              } else {
                                __nextRouter?.push(destination);
                              }
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["goToTheScience"] != null &&
                        typeof $steps["goToTheScience"] === "object" &&
                        typeof $steps["goToTheScience"].then === "function"
                      ) {
                        $steps["goToTheScience"] = await $steps[
                          "goToTheScience"
                        ];
                      }
                    }}
                  />
                </div>
                <div className={classNames(projectcss.all, sty.column__nnBu)}>
                  <h1
                    className={classNames(
                      projectcss.all,
                      projectcss.h1,
                      projectcss.__wab_text,
                      sty.h1___6Bsgi
                    )}
                  >
                    {"Be a part of TSF."}
                  </h1>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__cwaZ
                    )}
                  >
                    {
                      "Our first application: SKU-level monthly forecasts for Shopify merchants. We\u2019re now seeking seed investors to bring this breakthrough to market."
                    }
                  </div>
                  <Button
                    className={classNames("__wab_instance", sty.button___0EnWk)}
                    color={"muted"}
                    label={
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__cwRjF
                        )}
                      >
                        {"Investment Opportunity"}
                      </div>
                    }
                    onClick={async event => {
                      const $steps = {};
                      $steps["goToInvestmentOpportunity"] = true
                        ? (() => {
                            const actionArgs = { destination: `/investment` };
                            return (({ destination }) => {
                              if (
                                typeof destination === "string" &&
                                destination.startsWith("#")
                              ) {
                                document
                                  .getElementById(destination.substr(1))
                                  .scrollIntoView({ behavior: "smooth" });
                              } else {
                                __nextRouter?.push(destination);
                              }
                            })?.apply(null, [actionArgs]);
                          })()
                        : undefined;
                      if (
                        $steps["goToInvestmentOpportunity"] != null &&
                        typeof $steps["goToInvestmentOpportunity"] ===
                          "object" &&
                        typeof $steps["goToInvestmentOpportunity"].then ===
                          "function"
                      ) {
                        $steps["goToInvestmentOpportunity"] = await $steps[
                          "goToInvestmentOpportunity"
                        ];
                      }
                    }}
                  />
                </div>
              </div>
            </div>
          </section>
          <BlogPosts
            data-plasmic-name={"blogPosts"}
            data-plasmic-override={overrides.blogPosts}
            className={classNames("__wab_instance", sty.blogPosts)}
          />

          <CtaBlock
            data-plasmic-name={"ctaBlock"}
            data-plasmic-override={overrides.ctaBlock}
            className={classNames("__wab_instance", sty.ctaBlock)}
          />

          <HeroSection
            data-plasmic-name={"heroSection"}
            data-plasmic-override={overrides.heroSection}
            className={classNames("__wab_instance", sty.heroSection)}
          />

          <Footer
            data-plasmic-name={"footer"}
            data-plasmic-override={overrides.footer}
            className={classNames("__wab_instance", sty.footer)}
          />
        </div>
      </div>
    </React.Fragment>
  );
}

const PlasmicDescendants = {
  root: [
    "root",
    "header",
    "features",
    "columns",
    "blogPosts",
    "ctaBlock",
    "heroSection",
    "footer"
  ],

  header: ["header"],
  features: ["features", "columns"],
  columns: ["columns"],
  blogPosts: ["blogPosts"],
  ctaBlock: ["ctaBlock"],
  heroSection: ["heroSection"],
  footer: ["footer"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicHomepage__ArgProps,
          internalVariantPropNames: PlasmicHomepage__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicHomepage__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicHomepage";
  } else {
    func.displayName = `PlasmicHomepage.${nodeName}`;
  }
  return func;
}

export const PlasmicHomepage = Object.assign(
  // Top-level PlasmicHomepage renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    header: makeNodeComponent("header"),
    features: makeNodeComponent("features"),
    columns: makeNodeComponent("columns"),
    blogPosts: makeNodeComponent("blogPosts"),
    ctaBlock: makeNodeComponent("ctaBlock"),
    heroSection: makeNodeComponent("heroSection"),
    footer: makeNodeComponent("footer"),
    // Metadata about props expected for PlasmicHomepage
    internalVariantProps: PlasmicHomepage__VariantProps,
    internalArgProps: PlasmicHomepage__ArgProps,
    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicHomepage;
/* prettier-ignore-end */
